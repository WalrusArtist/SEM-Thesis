[
    {
        "title": "\ud83c\udd95 Pull Request File Tree (Beta) Feedback",
        "url": "https://github.com//orgs/community/discussions/12341",
        "upvotes": "3680",
        "body": "For the past few months, we've been working hard to improve the Pull Request experience. One of the features we're most excited about: Pull Request File Tree. The new tree:/nGreat addition to PR reviews! This is a much easier way to navigate and visualize changes in a PR. If/when this hits public release please give the option to pin it to the right side instead of only the left!/nLooks good! Even if really big PRs, I can finally filter using part of the filename, which was close to impossible before! \ud83d\udc4f\ud83c\udffc/nGreat addition! But I think, that a indicator should be added, at which File you are currently looking (because you can scroll like before, but the indicator itself does not update its location)/nLooks great so far \ud83c\udf89  if I had some suggestions for improvements:/nGreat addition! \ud83c\udf3e/nLooks good. As a suggestion I would like to see which files have comments in the tree./nLooks not so good on 4k resolution:/nI like it but I wanted to disable it to test something but disabling it in feature preview does nothing and I still seeing file tree./nLove the new feature.\nI have a potential feature suggestion.\nCould a shade of colour be added to the tree for all of the files that are marked as viewed?\nSo for argument's sake, if we mark a file as viewed, a light grey color gets set in the file tree./nThis is a great feature!/nNice addition. The feature does not seem to work in the commits tab of the PR. In our shop, we typically do commit-by-commit reviews and rarely use the files changed. It would be nice to have the file tree in commits as well./nThis is such a great feature./nFirst of all amazing feature, cheers!/nIt's really useful but some minor points:/nI like the ability to navigate the file tree, but I wish it would remember whether the drawer/sidebar was open/closed. I often have GitHub in a narrow window (as GitHub is fits comfortably in a narrow window), but with the file tree defaulting to open the space for the diff is greatly reduced./nDoes anyone know if there a way to see in the left Tree view if a file has been Viewed?/n\ud83d\udc4b Hello everyone,/nPlease make the file list width changeable - drag left/right to min/max/nSuggestion: For convenience add an 'X' button in the filter text box when the filter is active to allow the filter to be quickly cleared./nI don't know if this has been suggested elsewhere, but I'd really like a \"File filter\" option to filter files that have been renamed without changes.  When moving large directories around, this can really slow down the UI and add a lot of noise to a review./nFor those PRs with lots of files, it'd be great if the active file, or one that's the first file within the viewport, was highlighted in some way in the file tree. That way I could tell as I'm scrolling through where exactly the file I'm looking at exists relative to the other files I'm reviewing. It also gives me a sense of how far through the PR I am./nWith ~2.000 changed files, the tree is not usable on Firefox.  -- PR https://github.com/JabRef/jabref/pull/10646/files/nGreat addition! But I think, that a indicator should be added, at which File you are currently looking (because you can scroll like before, but the indicator itself does not update its location)\nFor those PRs with lots of files, it'd be great if the active file, or one that's the first file within the viewport, was highlighted in some way in the file tree. That way I could tell as I'm scrolling through where exactly the file I'm looking at exists relative to the other files I'm reviewing. It also gives me a sense of how far through the PR I am.\nI don't know if this has been suggested elsewhere, but I'd really like a \"File filter\" option to filter files that have been renamed without changes. When moving large directories around, this can really slow down the UI and add a lot of noise to a review./nCan you do something to make the full packages and file names visible? Currently is it not possible to see the full name in any way, because the file tree window is not re-sizable. Maybe there could be balloon popups?/nHard to believe, but it is year 2024 and the file tree still has a fixed width/nWould be very helpful to be able to navigate between files with up and down arrow buttons.\nWould make scanning through big PRs easier and faster./nI would like to report a defect.  Please add mouse-overs/tooltips to the truncated items in the tree.  Currently there is no way to/n"
    },
    {
        "title": "Bring back the old feed please, the new 'For You' tab is horrible.",
        "url": "https://github.com//orgs/community/discussions/66188",
        "upvotes": "2306",
        "body": "Product Feedback/nAgreed. The focus on turning github into more of a 'feed' social media while de-emphasizing the activity that is happening to my own repos to the point where it the activity gets hidden in the noise is terrible and a huge regression to the previous setting/n+100000, this thing is awful.  Larger boxes means less history./nI don't agree with the tone of the opening post, but I'd have to agree with some of its message./nThe new page makes this view completely useless for me. The reduction in value for me cannot be understated. I get zero value from the new view./nAnd why the #$%^&*()_+ does the blasted \"we've royally screwed up your home screen with our new thing\" box NOT STAY BANISHED!?!?!?!?/nThis new feed is terrible, none of the filters seem to work for my own account stats, instead it shows content based on others. I can no longer see who has starred or forked my repos, which I use to determine what projects I should continue to work on. Where did this change come from? I didn't hear anything about it. I was on this morning then come back this afternoon and it changed./nthis is so bad. i'm not seeing any starring activity from people i'm following, which is the main thing i use the feed to monitor. this was one of my most valuable signals for keeping up with new projects and now it's just turned to shit for no reason./nI agree. I used to check my feed frequently as it pertained only to my projects, now it is full of noise about starred projects and just useless. Please bring back the old feed or at least provide an option to restore prior behavior./nThis change makes me somewhat concerned that Github does not realize that its primary userbase is developers who, first and foremost, wish to know about activity in projects that they develop. This isn't Facebook for code, this is a place where I do actual work./n+1 need feed style is horrible/nHoly cow the new feed is awful. I want literally none of the things it does, I'm not on Github to discover content like the banner says and the feed is now full of garbage that's useless and completely irrelevant to me./nIf you give me the ability to filter the feed, at least add an option to see commits and co of repositories I contribute to, which is what I used the main feed for prior. This way we can toggle off all the stuff we don't want and can keep what we used to like./nI agree with this, please at least give an option to have it just show activity on repos I'm watching like it was before. It was super useful to know if someone starred or forked a repo or followed me./nCan y'all (i.e., the GitHub team) please don't force this obtuse, unnecessary algorithmic feed on us?/nyeah, I hate it. took way to long to figure out how to get rid of \"trending crap\", which I dont care about. its called \"Recommendations\", and of course they put it at the very bottom of the filters, because they dont want you to remove it. then when I unchecked it, I lost EVERYTHING that I used to see before, in regards to history of people starring my repos./nMy support ticket was closed with a link back to the updated changelog post, which doesn't actually address any of the issues that people have been raising over the course of the past month \ud83d\ude1e/nmy feed has been showing me the same two posts about people starring some of my repos at the top of the page for over two weeks. The old page was full of activity while this one sits dormant while claiming to be an improvement/ndang, the feed is still ded/nAt least there is that filter now (didnt notice it earlier?)/nIt's been weeks and the feed is still utterly broken. The \"Follow\" function doesn't seem to do anything anymore, all the commits I want to see are completely gone, and releases are only visible because I starred those repositories, even though most of those releases are ones I do not care about because I intentionally did not follow those repositories./n+1/nWe can only silently accept this useless new version of the feed.\ud83d\ude23/nI am trying really, really hard to resist the incentive that the new feed is giving us to un-star everything in order to cut down the noise. I think as long as dashboard-feed exists I can resist it, but once that is gone, I don't think I'll have another choice if I want a feed that is valuable to me./nHow do I turn this shit off? Are there any 3rd party tools to bring back the old feed by using https://github.com/dashboard-feed maybe?/nI am here once again because https://github.com/dashboard-feed is no longer functioning for me. The updated feed does not address my concerns. I cannot filter certain events for only my repositories. For example, if I want to only see repository activity of my repositories, I will automatically get repository activity of \"recommended\" repositories, which are usually repositories I do not have any interest in./nGitHub has posted a follow-up update about the homepage feed today: https://github.blog/changelog/2023-11-27-improvements-to-the-homepage-feed//nWe can only silently accept this useless new version of the feed.\ud83d\ude23 == test feed/nSeems like they're running surveys on the old dashboard feed now. This could either mean that they're planning on bringing back some of the old functionality to the homepage feed (that's good) or that they're going to change and possibly break the dashboard feed (very, very bad)./nUp/nI've gotten used to the new(er) dashfeed.\nAnd while it's nowhere close to the original, that isn't gonna make me to \"stop using github\". I'd rather not learn a new platform like GitLab and just adapt to whatever this new Feed is./n"
    },
    {
        "title": "Allow PR reviewers to comment on and suggest changes to unedited lines of code",
        "url": "https://github.com//orgs/community/discussions/4452",
        "upvotes": "1613",
        "body": "One of my favorite changes to GitHub's PR review experience was the introduction of suggested changes. I regularly use this feature in documentation PRs; suggesting changes really helps speed up the review cycle by allowing me to prepare a necessary change and allowing the PR creator to review and accept it rather than me commenting how we should modify the text./nRelevant. isaacs/github#1655/nYeah, hardly a day goes by that I don't want to comment on some line but the GitHub UI is like \"nope, if you want to talk about that line go write out in English author, please look at line 123 and pretend what I'm saying here was written there and stick it on an unrelated but edited line :)/nHow is this not a thing already? GitHub PRs are by far the worst code review tool I've ever used. This would make it a tiny bit better./nI just needed this feature today, I wanted to point out something that is related to the change but not part of it./nI also needed this feature today in order to comment on some code not changed by the PR but relevant to the PR's changes./nI'd think that it's a problem to do because code suggestions need to be retained, even as \"outdated\", even after PR author pushes more commits or even rebases and force-pushes the branch. Probably comments are linked to specific lines in the unified patch of the PR.\nBut code suggestions outside of the main patch still could work the same, by keeping separate patch layer for suggestions./nCompletely bizarre that this is not possible. Case in point: a PR refactors a file from JS to TS. If a line has not been refactored and therefore changed, how do I point it out to the dev??/nThanks for the feedback. We understand the need and are investigating the feasibility this quarter. 2021-12-19 update: Commenting on any line of a file changed in the pull request is on the roadmap for next quarter: github/roadmap#347. Please use #9099 to discuss commenting on unchanged files./n++/nOne of my favorite changes to GitHub's PR review experience was the introduction of suggested changes. I regularly use this feature in documentation PRs; suggesting changes really helps speed up the review cycle by allowing me to prepare a necessary change and allowing the PR creator to review and accept it rather than me commenting how we should modify the text./nHow can we tell the progress of github/roadmap#347, since Q1 is over and it is not possible still, just wondering if there is status somewhere, has it been started or not, almost done, done but waiting for official release, etc./nGithub is really disappointing compared to Gitlabs. And they're supposed to be the originators./n@jeffsaremi don't lose your hope on them man/nUpvoted. This would be incredibly useful./nAfter discovering that it is impossible to approve your own PR, now this one.../nWhy is this not implemented already? Really annoying that cannot add comments to unedited line./nbump, I guess/nReally worst code-review platform ever. After Gerrit it's always frustration and pain to use Github for reviews. Aren't Github employees reviewing code with their own platform? That'd explain a lot./nBump. This would be very helpful/nPlease do it, it's weird that Azure DevOps offers such a better reviewing experience./nIt seems like the best place to push for this is https://github.com/orgs/community/discussions/9099/nBeen using this for ages in Azure DevOps.\nOften need to suggest a change to a line the developer didn't touch.\nVery useful there, a massive hindrance in Github PRs.\nThis request seems to have been going since Dec 2021. The lack of attention is mind-boggling./nI want to share a workaround that may work for someone. While this is far from being ideal and doesn't work for all use cases, it's kind of okay if you're building some kind of automation and all you want is to suggest code changes in another file using the API./nAny progress on this? I find GitHub to be a good code-review and collaboration platform, and this feature would be incredibly helpful!/nwaiting for updates on that :)/nSometime we need to point out to a fellow developer where he needs to do the change, and not allowing us to comment on those specific lines because they were not modified is annoying./nUnfortunate that this is still an issue after almost three years. Seems such an easy fix to activate. Don't see how there is a technical blocker for this. If there is, would be good to verbalize why./nHow on earth is this still not a thing??/nIn the GitHub Advanced Security video they're able to create a ````suggestion` with \"Outside changed files\" targeting line 16 of package.json in GitHub comments. I'd love to know how this is done./n"
    },
    {
        "title": "Trending tab",
        "url": "https://github.com//orgs/community/discussions/31644",
        "upvotes": "1605",
        "body": "I just got the message:/n100% for me too. I use it everyday to discover new interesting projects/nThis is not a good decision. The trending tab is one of the few reasons I enjoy using Github./nThis is literally single tab I visit regularly outside of repositories./nHalf of the repos on my Starred list are projects I found while lurking the Trending tab. Please don't get rid of the Trending tab \ud83d\ude2d/nClearly, just #WTF. I think this is not due to low usage, this is because they prefer the shitty \"explore\" that includes ads, events, sponsored content, etc./nI love this tool - heartbreaking to see this go away!/nWell trending is the main source for my favorite listings./nThat's insane. Everybody who is truly interested in open source use this page very often.\nThis decision looks silly, as if some \"efficient manager\" looked at the user base, compared it to the number of visitors on the Trendings page and decided to shut it down./nThis is a really bad decision. Just leave it as is, we don't need fancy features, we just want a simple way to discover new and awesome projects./nThe trending tab is my browser startup page; any alternatives, please?/nGod it would so nice is github was community driven and freely opensource/nThis page is my gateway to many of the awesome projects on this site. It's one of the main reasons that I visit this site every day.  Please don't remove it/nI use trending tab for finding helpful package, this is one of the GitHub feature. Please don't do this./nThis decision must be from a manager who doesn't even use github on a daily basis. Trending is a developers gateway to find amazing as well as up-and-coming projects. I also agree, most of the starred projects I have on my account was found through the trending page. Without trending I wouldn't even have found all the \"awesome\" repos which have such a valuable source of information./nIf GitHub deprecates \"Trending\" tab because of low usage, What are high usage tabs ?/nI love it. I look at it frequently. It's often lead to me finding projects I probably wouldn't have seen otherwise. I think the issue with its low usage is one of discoverability. It's very much a hidden feature of Github./nThe /trending tab is something that is near and dear to my heart. So I went ahead and created a free and open source version of it!/nInformation cocoon is \"Good\" for Twitter or Quora, not for GitHub.\nDevelopers love to see good things they didn't expect rather than being surrounded by things they already know./nHi everyone! I'm working with the team on Trending and would love to get more detailed feedback on the Trending tab. If you're interested in helping us make it better, we'd like to do a compensated 15 minute testing session with you!/nWhy you have to remove one of your most useful tab ? My friends and my teammates all like this page , don't remove it , save it ! FOREVER !/nNo, i love this for discovery!!!!/nI'm a big fan of the trending page, I actually made an app that actually links to what people are talking about trending repositories on Twitter, HackerNews, and Reddit. I start my day by opening this app./nMaybe make some improvements on notification feature of GiHub trends?\nLike github-trending-repos project that sends GitHub notifications about new trends. Many people found it useful./nFor some background, from all our telemetry, usage of the Trending page has been very low since it was created and usage has stagnated/n\ud83d\udc4b Hello GitHub Community,/n"
    },
    {
        "title": "Disable \"Squash and merge\" on some specific branches",
        "url": "https://github.com//orgs/community/discussions/10809",
        "upvotes": "1320",
        "body": "Hi,/n+1. same exact use case./n+1/n+1/n+1/n+1/nYes, this keeps biting us as well. GitHub... please hear our cries!/nBranch protection rules appears to be the right place to define this. Github, please reach out if you are looking for beta testers for this feature request. ;-)/nThanks a lot those who showed interests in this feature request!\nFWIW, we created a GitHub Action which simply creates and merges a deploy PR, that can be triggered manually. I know it's a bit tedious and ugly, but  it's an only solution we came up to prevent from using \"Squash and merge\" accidentally until this feature request is resolved./nThis would be a great feature. The number of times people on our team accidentally squash merge to master, then I'm forced to resolve conflicts on develop...urgh!\nPlease GitHub consider this feature! :)/nIt persists the button as whatever last one you used, which makes this really easy to flub.  Then the poor sucker who has to do the next merge into the deploy branch has a mess to unravel./nYeah, this feature would be great./nyes please allow specify merge strategy per branch protection rule.../n+1 exact same use case. Surprising that it hasn't been considered for so long./n+1. We've been promoting branches associated with environments so dev->stg->prod and it would be great to enforce squash merge into dev and disable squash merge for stg and prod./n+1 need this/n+1/nReally keen for this feature, would stop our ops team (and me) making silly mistakes all the time./nThis has been open for over 2 years now and we just keep accumulating +1 comments on it. The interest and demand for it must surely be obvious by now. But what is being done for implementation?/nThe closest we got is Allow merge commits and Allow squash merging on the repo level, then Require linear history on dev branch. That takes care of only allow squash merges for dev but leaves a hole open where we want to disable squash merging on main./n+1/n+1/nNote that this can be achieved indirectly by using merge queues - https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue. When enabling a merge queue for a branch, you can select the type of merge for pull requests./n+1/n+1/n+1/n+1/nIt's insane after all this time they still haven't responded to this obviously important feature even with so much as an acknowledgement that it's on the roadmap./nThis continues to bother me, and we've made the mistake enough times, that I've written a Chrome extension to stop me making the mistake again. No support, not gonna publish it to the web store, but maybe it helps someone./nI guess you could create a GitHub action that checks the merge type and fails if the merge type is incorrect/nI guess you could create a GitHub action that checks the merge type and fails if the merge type is incorrect/n"
    },
    {
        "title": "[Markdown] An option to highlight a \"Note\" and \"Warning\" using blockquote (Beta)",
        "url": "https://github.com//orgs/community/discussions/16925",
        "upvotes": "1235",
        "body": "Alerts are an extension of Markdown used to emphasize critical information. On GitHub, they are displayed with distinctive colors and icons to indicate the importance of the content./nHow about **Important** for very important information?\nCould be useful in combination with Issue forms to get the attention of the user so that they know what to provide./nThanks for this!/nThis is amazing \ud83d\udd25 . This is now getting more features similar to AsciiDocs and AsciiDoctor \ud83c\udf89/nWould love to see more callouts too for different use-cases. These 5 below might be good to start with!/nClever backwards compatible syntax \ud83d\udc4d/nHow about Check for checked information?/nWhy use the blockquote element?\nThe content is not always that is quoted from another source./nHi, I like the idea but I would like to propose alternative syntax./nNice feature! Any way to use without blockquote though?/nMore customization is always nice. What if you could specify the Github's Octoicon, color, and text?/nSeems like.../nInstead, why not use highlight syntax for >I> will provide Important stuff. >W> ->  Warning, >N> for note./nWould be cool if this can share the same syntax as Microsoft Docs \"alerts\" and Obsidian's \"callouts\"./nThis is awesome! \ud83d\ude80/nThis syntax might hinder with what user actually wants to write/nIs there a way to customize the text near the icon?/nI've noticed that in order to use this, the > has to be the first character in the line. If I want to nest the note/tip/etc under, say, a bullet so it's indent follows, it doesn't work./nTo me as innocent bystander, IMHO in a creative and open source environment like github there should be no group or instance controlling where certain markdown elements should or should not be used. They should just work. Anything else including standards and best practice will evolve./nExcuse me,when will the code folding function be added?/nHello,/n@dipree You can probably  remove the pending bit, at least GitHub Mobile for Android has support:/nHow could I figure out which version of github enterprise (will) support this new markdown syntax?/nDoesn't work in <details>, we want to be able to hide a section of the page with <details>, but have to redesign the document, because [!WARNING] that is relevant in the hidden section only renders incorrectly./nAt minimum, alerts need to be supported by github pages. After all, it\u2019s the whole point to carry over markdown to web representation./nIs this supported by npmjs.com?/nWhile this format is still in beta, please revisit adopting directives or any other more common format1./nHi, does gitbook support this markdown feature? or any simmilar one/nCaution/nCheck here https://github.com/opensrc0/fe-pilot?tab=readme-ov-file#usage\nClick on See the list of components/nHello, is it known when this will be made official? :) Greetings/n"
    },
    {
        "title": "Parallel Steps",
        "url": "https://github.com//orgs/community/discussions/14484",
        "upvotes": "1226",
        "body": "Hi,/nI'd like that too. There are scenarios where it doesn't make sense juggling artifacts between jobs.\nThis would be greatly helpful for self-hosted and bigger runners too, where you can have many cores and handle parallelism well./nAlternative solution:\nWe can convert steps into actions, and then use reusable workflows to solve the problems you said/nHi,/nLogging into docker in parallel is probably going to result in things exploding./ncan we have the parallel steps please/nThe BitBucket has parallel step options. Why not add this option to GitHub actions?/nThis is the biggest pain point we've run into coming from Jenkins. You can approximate this feature with cache, artifacts, and matrices but it's considerably slower, more costly, and error prone./nNeed parallel steps support for our scenario: deploy multi clusters concurrently within the same VPN environment. So it is convinient to achive in steps rather than actions or jobs/nUsing a yarn monorepo I'd like to:/nIf its easier, GitHub could also allow sharing jobs workdirs/nI just want to start a resource in a background, which needs some time to start, eg a docker container or a simulator. This resource should start during the job start. My test step should wait until the test resource is available, or fail after an (optional) timeout./nNote how it was implemented in Cloud Build many years ago yet it's super convenient syntax:/nAs a workaround I was able to use this\nhttps://github.com/marketplace/actions/distributed-task-runner/nHi. Are there any updates on this topic from a Github team member ?\nReading the thread it seems like a strong painpoint./nWould be great to have some updates here. Parallel steps would be great, plenty of instances where for example I'd like to know whether multiple steps fail (eg: a lint check as well as unit tests). While jobs can run in parallel, each needs to be setup again. Would be great for a pipeline to be able to run a setup step that for example pulls dependencies and then splits off in parallel steps each starting from the state left by the setup.\nBitbucket is able to do this, for example./nWould be awesome if we can, for example, compile our js/css files at the same time we are running composer (for PHP projects)./nJust wanted to add, that parallel jobs means waiting for multiple available workers, which can add a lot to the total build time, and in some cases you don't need the extra hardware./n"
    },
    {
        "title": "We need old feed back",
        "url": "https://github.com//orgs/community/discussions/66244",
        "upvotes": "1098",
        "body": "Product Feedback/n+1, I agree with you. The new homepage is completely useless, thanks GitHub. :(/nA big issue I have with the new feed is that mine is effectively filled now with a bunch of junk. It's why I never voluntarily switched over. I've had my GitHub for just over a decade now and I'm getting useless updates about projects / repositories I starred ages ago, that I have no interest in today. I get I can go in and unstar things, but that's a whole lot of work to do. As a result of this change over, the things I actually cared about (what folks I was following were looking at) is now lost in all the noise./nwhat the hell of new homepage! i can't find anything i want/nAgreed. The new feed is terrible./nThe homepage of the new version is very confusing, and I can't see which valuable repositories have been starred by the people I follow.\nI want to go back to the old home page./nI don't know why in the programming or software industry.\nI also found that many unprofessional people occupy highly professional positions.\nIn the C# community, Microsoft let a person who has no trace of writing code on the github page participate in managing the direction of the C# language.\nIn Github, it seems that another product manager who does not use github is found to design the homepage of github.\nWhy do these absurd things always happen in Microsoft's business lines?/njust useless!! I can't see which valuable repositories have been starred by the people I follow!!/nSame here. I only care about the commits and PRs of people that I follow... and now I can't see that info./nhttps://github.com/dashboard-feed/nYou added the absolutely useless social part to github, and now you're removing the actually useful feed? WTF? What next? Political news section?/n\ud83d\udcaa Using this script you can restore the old version of the feed.\nhttps://github.com/wangrongding/github-old-feed/nAt least bring back the option to toggle between the old feed and 'For you'./nReally shit and waste of screen estate. I don't need to watch people thumb up this or that!/nPlz bring back old feedback: I miss my repo stars activities./n+1, the most valuable information is just gone with no way to bring it back, thanks microsoft.\nGithub is not social media, stop trying to use fancy algorithms to show me 'stuff that I want'. I don't care about updates for a random project I starred 2 years ago, if I want to know about it I'll go look for it.\nA plain old list of projects starred by people I follow & MRs was fine./nAfter this change, Github isn't the source of knowledge and inspiration it used to be./nNo response from GitHub for about a month. I think they want us to adapt forcibly./nLooks like they just decided to ignore the problem. GitHub, the new feed is useless. Bring back the previous feed./nPlease, pretty please <3/nI mean, after over a month, I got used to the new dashboard and I feel it to be almost (ALMOST) as it was before./nThanks GitHub, this dumbed\u2013down dashboard now not displaying wiki updates/diffs from our repos means I've missed a crucial feature change in a core product lifecycle that I should've reviewed./nmay need tab cards to record and display the filter items I choose. I want to directly see what I want to see based on my wishes./nI need to pay attention to people's dynamics, not the current automatic recommendation./nWhy missing show more button now? https://github.com/dashboard-feed?/nWe need old feed back/nI like the old one, it's simpler and clearer. I still find the new one confusing me./nPlease, maintain this Discussion active./nThis new feed is a disaster. I've unstarred some repositories because the feed couldn't learn that I don't want to see news about every new discussion in some low-prio-for-me repo./nI agree, the feed has gotten way worse. Sometimes it returns something with filters enabled, a few minutes later it does not, then again, it has been really unreliable. Please bring back the old feed!/nI found a solution that works for me. I am not using feed anymore altogether.\nAny pageviews there are accidental/n"
    },
    {
        "title": "copilot.vim support for copilot chat?",
        "url": "https://github.com//orgs/community/discussions/50939",
        "upvotes": "1097",
        "body": "Product Feedback/nHi @zdufour-asp , Thank you for your feedback and the excitement for the new tech \ud83d\ude80 . Since the product is in the public preview, it is pretty early for us to comment on future developments.  Sign up for the private preview now if you haven't so far. \ud83d\ude42/nSign up for the private preview now if you haven't so far/nNow that Github Copilot Chat is open for all, will be developed a pulgin for neovim?/nCurrently paying 100$ per year for basically Copilot, now it's late 2023, I wish I could benefit the most from this expense, but I cannot as I'm a Neovim user./nCopilot Chat seems to be rolling out for more people. Any plans for adding support to neovim?/nlooking forward to this!/nOne more vote for getting Copilot chat support on the vim/nAnother vote for maintaining general parity between the vim and vscode versions/nFolks: There's a vote feature at the top. Using that adds your support, without notifying anyone. I'd like to stay subscribed to this, so I can get actual updates, but when you add a comment that's just \"another vote,\" you achieve nothing except annoying me and everyone else who is subscribed. If people keep doing it, I'll have to unsubscribe, and then I won't stay in the loop. So please, don't comment with a +1./nwould love this feature to be ported to nvim as well/nWhen Copilot says \"you can work in your favorite editor\", and then preferentially rolls out features to only the Microsoft-connected editors for half a year, offering no progress updates on support for other editors, it looks super sus./nI really hope that copilot can support chat function in nvim./nFyi, a community person wrote https://github.com/gptlang/CopilotChat.nvim. I read it (checkout of 798a48b) and it is rough around the edges, but the basic idea is that it provides a :CopilotChat command that simply takes a prompt (eg, :CopilotChat hi there!). This will open a scratch file then set :setlocal buftype=nofile bufhidden=hide noswapfile. I played with it a bit today and found this to be fairly usable:/nI have no horse in this race, but maybe Codeium could release something like chat for Neovim first and that would be interesting on their adoption side over Copilot. I use both in Neovim and they produce very similar outcomes./nvim support for chat +1/n+1/nAs a committed Vim user I have to admit Copilot's advertising around Vim support feels deceptive. It is implied in marketing materials that Vim users will have access to the same features as users of other platforms, when in fact one of the biggest selling points of Copilot is completely missing. There is no timeline for chat, or even an indication that chat will be added./nNow it is \"generally\" available... \ud83d\ude20/nMaybe we should just get a beach house.../nYou can always check the GitHub Public Road map to see what's coming. Here's the query for searching upcoming GitHub Copilot features./nHi there!/nhttps://github.com/CopilotC-Nvim/CopilotChat.nvim best we got at the moment/nhttps://github.com/CopilotC-Nvim/CopilotChat.nvim best we got at the moment/nHi there,/n"
    },
    {
        "title": "[Feature Request] Allow github actions to bypass branch protection rules in certain specific circumstances",
        "url": "https://github.com//orgs/community/discussions/13836",
        "upvotes": "1038",
        "body": "There are workflows in which it is desirable to have the workflow itself make changes (such as updating a pom.xml, packages.json, CHANGELOG.md, etc.) on a branch which is otherwise protected from direct changes./nAlso mentioned and requested here: https://github.community/t/allowing-github-actions-bot-to-push-to-protected-branch/16536/nEven though it wouldn't work in all use cases for all people, treating the github-actions bot as a full-fledged app so we can add it to protected branch pushers would be immensely useful in a number of situations./nFYI: https://github.blog/changelog/2022-05-17-consistently-allow-github-apps-as-exceptions-to-branch-protection-rules/nJust encountered this exact issue. This is certainly great to have for smaller hobby teams as well where you don't really want nor need to setup whole delivery pipelines.\nI have setup simple automatic deployment on main which commits some changes like assembly version bumps, changelog, etc. However, I have to remove the branch protection for it to function which is bad for collaborations./nYes, GitHub, let's get this feature in please./nWould also like this implemented. \ud83d\udc4d/nThat would be a great GA to implement!/n+1 I had to implement a walkaround to cater for such requirements which I do not encourage following.../ndoes this fit your need ? https://github.blog/changelog/2022-08-18-bypass-branch-protections-with-a-new-permission//nAlso interested in a solution - I'm trying to auto bump the version but the branch protection rule I have on main branch doesn't allow it./nAlso looking for a solution! I have a python-black formatter that pushes code to the main branch but the protection rules won't allow it/nI'm running into this issue as well. I use semantic-release to automatically update my package whenever my main branch is updated, and I use @semantic-release/git to commit the updated version and changelog back to the branch. However, I also want to enable required status checks so I can have that peace-of-mind (and also use auto-merge). But I can't, because if I turn it on the action can't push the version update anymore. Having a setting (either in the branch protection rules as suggested above, or in the action itself using the new permissions setting) would be a huge help for getting my setup clean and efficient./nCan we bypass the permission rules with Gitbook?/nAs a simplification of the \"service user\" approach outlined by the OP: for the commit(s) pushed by the \"service user\", one can consider using [skip ci] to suppress status checks without adding any extra rules in the workflows (see https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs)./nGithub, this is a need for full automation after deploys.  PLEASE consider this soon./njust ran into this today...\n+1/n+1/n+1/nPlease stop Posting +1 comments. Those are ignored. Instead, upvote the initial post./nLike most resources on GitHub, commenting that you support the issue without any meaningful addition to the conversation only functions to notify people that also are unable to fix the issue in most cases./nHey everyone!\nAfter many many many attempts, I found a way to overcome this GitHub limitation./nNow you can use a GitHub App to bypass certain controls in branch protection rules or newly introduced Repository Ruleset depending on your requirement./nWe had the same issue and we were not able to push because at least 3 checks are required. Our problem was, that we run the git pushcommand like this:/n+1/n+1/n+1/nNeed this/nI was able to work around this deficiency by using the Github App approach discussed above. I had never created an app before, so here is the list of steps that were necessary for anyone looking for something a bit more comprehensive:/nI'm not sure I understand. GitHub does not want to resolve this, because anyone would be able to deploy to protected branch by creating a workflow file (comment here @chrispat)/n+1/n"
    },
    {
        "title": "Organization gists",
        "url": "https://github.com//orgs/community/discussions/7923",
        "upvotes": "991",
        "body": "This was suggested back in 2010, and stated as planned, and then never done. Pleaaaaseeee support gists for organizations on GitHub./nThat would Definitely be useful/nNot sure if giving an answer bumps the discussion up, but I will attempt to do so because I still need this. We have the ability to follow organizations now, adding gists wouldn't hurt :]/nHi it's 2022. Please can we finally have this after 12 years \ud83d\ude02/n\ud83d\udc4d to all of the above. This feature would be extremely useful. As an organisation we want to publish code snippets on public blogs and share them publicly, and we think Github Gists would be a great way to do this./nYes, this in fact would be super-useful - I've got to admit, I am surprised it doesn't already exist./n+1/n+1/n+1/nFound this while searching for how to do it. +1 from me/n+1/n+1/n+1, would be very useful./nPlease express your support with subscribing to this discussion instead of +1-s that triggers useless and annoying email notifications. Thank you/nCan we not enable gist for an organisation?/nEspecially private gists for organizations would be very much needed. This in particular useful for simple CI/CD or quick snippets sharing from a trusted source./n+1/n+1/n+1/nDo we have an update on the timeline for this feature?  This would be incredibly useful, and I'm surprised we're still currently unable to do this./n+1/n+1/nI would like to publish a gist as part of a company (shopify) blog post, and have that gist be an installable npm package. Having this come from the organization is much more appropriate than a private user account./n+1/n+2/n+3/n+1/n+1/nJust mentioning the note on the main issue:/n"
    },
    {
        "title": "\ud83c\udd95 Welcome to feed....back!",
        "url": "https://github.com//orgs/community/discussions/13130",
        "upvotes": "950",
        "body": "This category is a place for our community to discuss and provide feedback on the new feed \u2014 now available under the \"For you\" tab on your github.com dashboard./nNice initiative but I hope you never force it on us./nI love it! Really nice feature./n+1 for the \"Follow\" button. Finally there!/nThe contents inside a card release can be quite messy./nThe new feed is Just Awesome! Loved it\ud83d\ude0d/nGreat work team! This is awesome and wonderful. I love you all, I love your work/nYou're doing a great job./nWill the new feed support rss?/nPersonally, as a GitHub Organizations user, I would much prefer this whole are be replaced by dashboards and links that make me more productive.  For example, I use GitHub Projects constantly, but it takes so many clicks to get there.  Perhaps let me Organize/flag repos from my Organization/Team to include links and analysis for.  Really, I don't want to see anything from my personal account by default if I also have an Organization account./nI do not understand, why github tries to become some kind of social media platform now.\nThe feed is already full of irrelevant stuff.\nI really hope you will be able to disable this feature and also opt-out being used for other feeds./nLove the new look and feel of the feed! \ud83d\udc9f/nI don't like it at all, sorry./nthe previous feed let me focus on the repos I starred and cared about, not a bunch of suggested projects I've never heard of. Please let me use the original feed./nI understand people who don't like it but I just want to say that I like it :3\nIt showed me two good repos, which are intresting for me./nGitHub support:\nCAN SOMEONE HELP MY FRIEND WHO CAN NOT LOG IN? THERE IS NO WAY TO DO ANYTHING IF YOU CANT LOG IN, THIS IS TWO MONTHS WE HAVE BEEN TRYING. ( mark this as spam but please give us options other than the circle of pain that we keep being told to go through, two freaking months.  Help please? )/nI love change and new things .. but the new homepage doesn't help me at all and none of the content is meaningful to me. It's a step backwards.\nThe old homepage, I don't remember being amazing per se. But I do recall on multiple occasions: the thing I went to GitHub.com for in the first place happened to have a link on the homepage.\nThat never happens to me anymore with the new homepage. It makes me want the old one back./nFor you tab is almost empty for me./nI still can't get a news feed showing stars and PRs on my own repos. Right now I have no reliable overview of my own content - the actual only reason I am on github./nIt would be nice if our activity also gets available in feed along with other users activity./nThis category is a place for our community to discuss and provide feedback on the new feed \u2014 now available under the \"For you\" tab on your github.com dashboard./nNice initiative but I hope you never force it on us./nId prefer seeing a summary of my code, my organisation's repos recent activity and my recent activity \ud83d\udc4e \ud83e\udd37\u200d\u2642\ufe0f/nSince this has been introduced\na) I can't see what people I follow are doing (which is all I care about anyways)\nb) My open source repos have gotten less stars (since people who follow me also have the same problem as in [a])/nFeel free to remind @ashtom (lol, can't link him anymore, got too many complaints buddy?) on X/twitter (https://twitter.com/ashtom) that the feed is still broken under the post where he peddles his AI snake oil. May he'll actually do something about it (small chance) or maybe it gets some traction with the media which actually forces them to do something about it./n"
    },
    {
        "title": "Option to completely disable the new algorithmic feed (aka \"Please don't turn GitHub into Facebook\")",
        "url": "https://github.com//orgs/community/discussions/13154",
        "upvotes": "848",
        "body": "Please don't turn GitHub into Facebook./nThis. Now the information I am after is buried in a ton of \"recommended for you\" crap./nHey @mrjones2014, thanks for the feedback./nI don't think it's a Facebook feed, for me it's very useful, it shows me interesting things about the repositories that I follow and about my colleagues in which they collaborate and others, as well as recommendations from other repositories.\nAlthough he understands the fear behind the camera, at the moment I don't see that this is the focus, they are trying to make a feed more of global interaction than just in your circle./n@bdresser any updates on this? I deleted my Facebook account years ago for a reason.../nWhy does it default me to the algorithmic tab, even when I've manually gone back to the other tab? The algorithmic tab has horrible performance issues./nGithub will fade into irrelevance, just like twitter, a not serious place where big tech employees think they can manipulate what hits my eye balls for their own personal self-benefit/nI like the feature and think it's really useful, but I also think it is very important that it can be turned off. :)/nJudging by my first impression (and expectations) I probably won't be touching such algorithm-driven feed ever. I mostly get recommended random users and organizations I have never interacted with and have nothing to do with my stars, forks and followed users. At least there could be a filter system to only show something like small and more obscure projects related to your starred repos and languages you work with./nWhat is next? You will show \"stories\"?/nI like the feature, BUT should be:/nI saw the stupid feed thing, and I was like wtf is this. Does Microsoft think Github is a social media platform?/nFortunately it's at least possible to use uBlock to remove feed completely./nStop turning Github into Facebook, it's obviously a new product strategy after Microsoft acquired Github, but it's annoying./nIt might be good to have an option for \"collaborators\" in the feed filters. Sometime in the feed, I see a lot of unrelated crap with the reason You're seeing this because you collaborated with $userName./nEverything relevant that I am interested in is in the Following feed. I don't need an algorithmic feed./nWho are all these people? and what is all this noise?/nI have no idea who these people are \ud83e\udd37\u200d\u2642\ufe0f/nI don't need the feed at all. If I want to know something I search for it./nWhat happened... how did this become the default only view after hundreds of upvotes about how useless it is?/nIf someone writes an userscript to make this new merged thing chronological and hide the stuff from people I don't follow, please let me know. I don't mind whether it has to fill my local-storage or do tons of requests in the background./nLooks like the enlinkedinification of GitHub finally started after all./nI hate this new feed \ud83e\udd2e/nThis is what happens when Microsoft buys nice things./n\ud83d\udcaa Using this script you can restore the old version of the feed.\nhttps://github.com/wangrongding/github-old-feed/nThey now force For You onto everyone.../nFor anyone now considering moving off GitHub I just found out about https://forgefed.org/ and https://forgejo.org/ which is a federated git instance. Make your own forge and avoid the centralization on GitHub which clearly no longer stands by what we originally hoped for./n\ud83d\udc4b Hello GitHub Community,/nSee https://github.com/orgs/community/discussions/66226 for a current (growing) list of related discussions/nI'm so sad. I hope a new GitHub will arise./n"
    },
    {
        "title": "I don't want algorithmic feed",
        "url": "https://github.com//orgs/community/discussions/13131",
        "upvotes": "815",
        "body": "I just want a feed on things that matters:/n\ud83d\udc4d/nAgree. I don't mind an algo-feed existing for people who do prefer it (or, for that matter, if our dash is ~widgetized), but I want predictable chronological feeds./nMe either, can we have an option to opt out \"For You\" tab?/n+1 to muting people or events (or events by people)/nYup. I thought we were over this./nI'd actually love this feature. For people who don't, maybe a toggle in settings to turn off the feed./nThe release / issues / pr feed is good for the \"following\" tab. On my side, I would like to discover more projects from people I don't know, or issues I could contribute. Currently, I just have a feed of people who are following me, which is not interesting for me. It's just the \"following\" tab but filled with my followers, and this is not interesting./nThanks for the feedback! We do have plans to experiment with the ability for the viewer to toggle between chronological and algorithmic./nIn general I think it looks okay, but there's a bit too much stuff I'm really not interested in:/nDear @github-staff, I would like to ask you to also consider the potential impact of those on the other side of this i.e. the users whose actions, without consent, may be either amplified or diminished by an algorithmic feed. For many of us, GitHub is part of our livelihood, and the gamification of it could lead to extra stress we could do without. There are other platforms well-placed for promotion and dissemination of our work - please consider deferring to those, instead of making it a compulsory part of this site./nMost developers and consumers prefer open-source tools to increase data privacy and transparency. An algorithmic feed might translate to collecting more data, and it doesn\u2019t align with the open-source community. Also from a functionality standpoint, it does not seem different from \u201ctrending repositories\u201d. Algorithmic feeds could also gamify the platform. This might increase the amount of \u201clow-quality projects\u201d aiming just to be viral./nI was expecting to see PRs that are created by my followings!/n\ud83d\udc4d, Me either/nFully agree! And the old recent activity feature is really missing:/nI hate the new trend of \"tailored experiences\", but if GitHub is going to force a completely useless feed, at least give the option to be able to remove people and repositories that we don't care about. I see cards for things I have not been involved with for a long time and do not care to see it./nPlease stop piling junk on this site. You already added enough stuff that nobody needs. It's distracting, time consuming, and worsens the site/nThe new for you feed is less relevant than before. Social media for programmers already exists via subreddits and services like discord, gitter, telegram,.../nI see something new on the dashboard but there isn't an option to remove feed (yet) (And it's a little irrelevant to show \"get started on github\" to someone who has been using it actively for more than 13 years)/nhey there just adding my agreement to this thread./nThe thing that made GitHub great was that it was concise. Recently a lot of garbage features have been introduced that do nothing but clutter and distract. The feed is only useful for marketing. GitHub should not be yet another marketing tool./nupdate: they ruined github\nthe explore and for you are just redundant and this promotion will hit github really bad\ni do not like gitlab and some of their practices are not open source for me but looks like the community gotta make a decision if this goes./nI am posting here just to express my agreement and because I am genuinely mad. Instead of a clean overview of people that I follow and events happening in my repos (stars, forks, issues, etc.) I now have to look at some random algo generated bullshit that presents to me things that I don't follow or ever have looked at./nPlease let me go back to just seeing the events for people and repos I've explicitly followed; this newsfeed is useless to me.  I don't come to Github for social networking or to kill time, I come here to get work done and learn things.  Engagement with a newsfeed is a pretty poor choice of metric to optimize IMO./nImagine having all the money in the world and owning an incredible product like Github and one of the first things you do is to go absolute gutter trash levels of \"innovation\" with a LinkedIn style feed./nI can't remember how the GitHub dashboard looked before the feed was introduced and how it looked throughout the various feed iterations. I just remember noticing that it is more and more frustrating and useless. At the time of writing this comment, it got to a point where I am interested in the top-left 10% of the screen and my brain shuts out everything else. The useful area is so small that it could fit on a mobile phone screen without scrolling./nPlease let me turn off the right-hand sidebar, the one featuring \"Trending Repositories\".  I actively dislike it, it's distracting, and doesn't assist with the things I actually use Github for (work, OSS maintenance, etc).  If I want to waste time scrolling I'll use Twitter, tyvm./nThis new feed is so studid!/nWhy do I care who followed who? why do I need to see that? Why is it taking up so much space in my feed?/nSo good news is, that old feed is still available: https://github.com/dashboard-feed/n"
    },
    {
        "title": "Allow PR reviewers to comment on *unchanged* files",
        "url": "https://github.com//orgs/community/discussions/9099",
        "upvotes": "716",
        "body": "Allow PR review comments on files not included (unchanged) in a pull request. This is useful when a PR reviewer needs to tell the PR author about a change they may have missed in a file that was not changed in that pull request./nI have a use case in hand that could be solved by this proposed change./nYea this is a much needed feature. Some codebases can be complex and good reviews might quickly grow in scope from just the changes of the dev to a much larger set if the PR being reviewed touches/interacts with many systems indirectly/nI gree this would be very useful as well, has there been any update on this proposed feature?/nExtremely necessary for translators \u2013 when you need to correct mistakes in an already existing translation file, but missed by the author of an already opened PR./nI have another use case for this. A PR contained changes that caused stale code in another file. I couldn't add a comment on the stale code in my PR review./nI would also like to have this feature. I frequently find myself needing to do this./nThis would be very useful for large codebases in which old code needed to be removed/changed but was not... having to reference a line # and/or link to the code in a comment is very inconvenient./nAgreed that this would be critically useful. It would be great to see this happen!/nAdding my support to this request, for exactly the reason brought up by @jordanbtucker/nReally surprised this doesn't exist tbh - I thought I simply didn't know how to find it. But yes, it's extremely common during a PR review to find that a dev missed some related changes elsewhere in the codebase, & it seems currently there's no way to flag those. i.e. maybe they're refactoring references to a particular entity, but missed one of those references. As far as I can tell, there's no way to propose that as a change, in the spot where it actually needs to happen./nSurprised that this feature does not exist in the most widely used collaboration tool in 2022./nWanted to add a code suggestion that needed certain configuration in a file that wasn't changed. Felt unnatural to not be able to add this during the review but in another comment./n+1 In a PR I want to indicate that some code should be deleted, but since it wasn't touched, there's no way to do so./n+1/n+1/nSort of shocked this isn't a feature already, I wanted to point out a related file could benefit from similar treatment but have to find the file and copy the URL myself rather than just be able to explore the codebase for the branch and ref it/nReally surprising that we can't do that, why \ud83e\udd37\u200d\u2642\ufe0f/n+1/n+1/n+1/nI have a use-case for this feature as well./n+1/n+1/n+1/ni need this feature so bad. Is it in the pipeline/nI have a more narrow use case, where someone forgot to make a change in a file.\nLet's say they changed the name of a class in a header file (e.g. fixing a spelling mistake), but in a few places they forgot to change it in a source file. Right now, it's hard to highlight e.g. \"you changed in 4 places and missed the fifth one (100 lines away from any changes)\"/nI'd love to have this!!!/nDid you guys just forget about this, or...?/nIn the GitHub Advanced Security video they're able to create a ````suggestion` with \"Outside changed files\" targeting line 16 of package.json in GitHub comments. I'd love to know how this is done./n"
    },
    {
        "title": "[Projects Beta] Milestones Across Repositories",
        "url": "https://github.com//orgs/community/discussions/6296",
        "upvotes": "707",
        "body": "To fully manage projects, across repositories the concept of a \"Shared Milestone\" would be far easier to manage.  Consider the situation where you have a project that is comprised of multiple repositories, but you are working towards a common target (Q4 2021 Release) for example./nI second this, right now I have to create milestones across repositories which is frustrating and prone to error. and a pretty common use case./nThis must be the aspect I am struggling the most with. For now I have duplicated the same milestones across several repositories but that completely beats the purpose./nI also agree with this suggestion! I would really like to be able to assign issues from different repositories to the same milestone!/nIs this item in the roadmap going to help solve this issue? github/roadmap#278/nI just came here to also offer this as feedback - I would like project-wide (cross-repo) milestones for tracking deadlines and product launches that deal with code in multiple repos./nIf you just want a column, I realized it's possible to add a column (eg. called \"Project Milestone\" or \"Global Milestone\") in the table view now (choose a \"Single Select\" type):/n+1000000. We're desperate for cross-repository milestones - which seem like such a simple thing they should have been done years ago. It's very difficult to implement something satisfactory without multiple actions and third party plugins - and even then there's nothing (even ZenHub) that solves the problem./nI also think this is a great idea. It seems most of us are using Milestones for controlling Releases, and if a Project can support multiple repositories, then it should definitely support common Milestones among them./nDefinitely need milestones that cross repositories./nHi,/nAs an aside, I think GitHub's lack of cross-repository project management features has been one of the primary factors driving the monorepo trend./nAlso looking for a project based / cross-repo milestone solution./n+1 to this feature. Need it ASAP/n+1 Setting up milestones and labels, etc in every repository isn't ideal./nFYI: It\u2019s on GitHub\u2019s public roadmap as github/roadmap#276, currently planned in Future. See Issues-view/n+1/n+1/n+1/nProjects and task lists will likely replace milestones./nFor anyone wondering how they can use projects for cross repo (and org) milestones, see this thread for two options: https://thingster.app/things/hMX-hJkoKhtK4Te0UbcfS/n+1/n+1/n+1/n+100 need it asap../n+1/n+1/nDo we need to get our pitchforks?  +1/n"
    },
    {
        "title": "Ability to keep remaining team members as reviewers after one team member starts a review",
        "url": "https://github.com//orgs/community/discussions/5289",
        "upvotes": "648",
        "body": "Presently, if I add a team as a reviewer on a pull request, the first person from that team to start a review does so \"on behalf of\" the team, and the remaining team members no longer see that their review is requested on that pull request./nThis is on the first page of all feature requests when sorting by TOP.  Doesn't seem like it is getting surfaced/noticed.  My team would also love to have this feature./nSo there is no solution to this issue currently?\nOur team was so happy that we don't need to add everyone manually when we discovered this group option, but now we understand we can't really use it as we did the previous review requests so that everyone will be informed even if someone reviewed :\\/nThis is really annoyance! Every time I comment on a PR,  my team gets removed from the reviewers and I have to re-add it./nThis works fine for single approver repos, but clearly doesn't when you have 2 (or more) approvers needed, would like to see this get fixed/nFor anyone else vexxed by this:/n+1, this is desperately needed for repos that require more than 2 reviewers. PRs end up collecting dust due to not being visible to the larger team after someone hops on an initial review./n+1.\nI had no idea it even was like this. Imo, the default behavior should be that all reviewers stay reviewers unless you remove them as reviewers./n+1, we also require at least 2 reviewers and created a team to help assign the correct people. Our expected behavior wasn't that everyone else would be removed as soon as a single developer performed a review. As the bare minimum, make this behavior a branch protection setting so we can choose/n+1 I would also like to be able to add my entire team to the PR more easily. Having the team removed after 1-3 people review the PR is not helpful./n+1 agree on this feature request. Hope to see it being implemented in the near future \ud83d\udc4d\ud83c\udffb/nI think default behavior should be that team stays assigned as reviewers, as this more closely matches behavior when you specify specific reviewers. Or ideally this should be a toggle setting for the team/n\ud83d\udc4d Would like this so that the flow can less email driven./nThis was a surprising discovery for our team. Please address./nOur team was so excited when we discovered this feature, but the fact it de-selects the group when one person responds to the PR is a huge deal-breaker for us. Please address this - this is an amazing feature, especially for larger teams, hampered by one small aspect of its design./n+1/nbump; running into this issue as well. We use auto-assign to assign 3 members to the review but we also want to open it up for the rest of the team to see that there is a pending review and give them an opportunity to dive in and check it out if they have time./n+1\nwe have groups of 20-30 people and reviews are optional. We want everyone of the group to be able to review. Please give us an option to keep the group in the reviewer list. (Github Enterprise in our case...)/nA workaround is to reference every individual users into the CODEOWNER file that will then configure automatic reviewers assignment. However, adding a group instead in this CODEOWNER file falls on the OP issue./n+1/n+1/nThe default behaviour here is too opinionated - it needs to change or allow some configuration of the behaviour/n+1/nNot sure if something like this has been mentioned yet but for anyone who wants a work around for this you can try the following./n+1/n+1 - not a very helpful comment other then checking if this has gotten any traction or solved. I've recently set up Team's in our company github flow for auto team assignment on PR's. It's very handy to get everyone on the PR's, but then everyone is lost once a single person reviews it, the Team addition is gone./nWe've got our pull requests for one repository set to at least three reviewers and a Github team (all) added,/n+1 The team scheduled reminder to slack is not that useful with this existing behaviour. Keeping the team would help lots of our workflows./nIf you're 7 or less developers you can use a combination of these two settings under https://github.com/orgs/your_org_name/teams/your_team_name/edit/review_assignment/n+1 We need also every assigned member of the group to look up the pull request after one other member approved on behalf of the group. Otherwise the request will be lost./nWhy why why if I have a Team that is on a PR, and GItHub picks random users in that team to add directly to the PR, if one of the users that WASN'T picked and added to the PR comes and adds their review, WHY does the whole Team now get removed the PR?!?!/n"
    },
    {
        "title": "IPv6 support for cloning Git repositories",
        "url": "https://github.com//orgs/community/discussions/10539",
        "upvotes": "621",
        "body": "Hi, I'm surprised I didn't find an existing discussion with this topic. Some services like github-releases.githubusercontent.com or user pages do support IPv6, however the webpage (github.com) itself, including cloning of git repositories, does not work./nI am unable to understand what in 2022 still holds full IPv6 support for a platform like GitHub.\nEven if there is already a work in progress for this it is more useful to disclose a proper ETA rather than a \"we are working on it\" with no ETA.\nThanks/nNew ISPs in my country are IPv6-only because there is no new IPv4 space to be provided to them. They do have a over-shared IPv4 address by CGNAT but due to the oversharing, it is unstable and not rare to be offline. For these companies, the internet access is stable only in IPv6./nI really tried to use github in a IPv6 Only Network and I was not successful.\nWe are not talking about a new feature request or a little detail, we are talking about the current standard protocol of the Internet defined by IANA./nIf GitHub can't get v6 on GitHub.com soon, maybe at least an ipv6.github.com proxy for SSH git cloning?/nIPv6 is the actual internet protocol, while IPv4 is a legacy protocol. Please, priorize this request./nMy private ci is forced to go full IPv6 only, and this requires me to have one IPv4 gateway to access github. This in turn means I keep running into rate limits all the time. For now I've worked around this with an access token, but that's not sustainable./nIs GitHub deprecated or why there is still no IPv6 support? We are talking about a over 20 year old technology and the standard for about 5 years./nProbably because people that manage the technical team still didn't realize what this mean and didn't prioritize it enough.\nEvery time I get as an answer that something like \"there are many complex things that must be taken into account and it is not easy to adust everything to make it happen. It is in the roadmap\"/nI vaguely remember that years ago (pre-MS, pre-pandemic) somewhere Github engineers held a talk (or maybe it was a blog posting?) which more less said that IPv6 is in the makes, but less trivial than one might think. I just can't find that talk or slides or so anymore. I also vaguely remember that they mentioned ipv6.github.com \u2014 which exists, but is just a (probably wildcard-) dummy page which just points to https://ipv6.github.io/ (likely also a DNS wildcard) which then just states that there is no content yet. Probably because it (nowadays?) belongs to the Github user @IPv6. And the Wayback Machine only has a record from 2022 of that site. Maybe someone else remembers where that talk or blog posting was published./nIt's 2022, World IPv6 Launch Day was 10 years ago. Yet, GitHub still doesn't have IPv6 support. The IPv4 address space is exhausted for years now, and ISPs are using techniques such as CGNAT to still be able to give their customers access to the legacy IPv4 internet, with the instability of these techniques as the cost./nCC rust-lang/cargo#10711 this causes real issues for open source software users. This is an absurd conversation in 2022./nThis is $MS. This company was and will be ever a enemy of open source or new technologies that comes not from $MS. They did nothing that helps the community.  $MS is only interested in earning money and gives a shit on your needs/nHow can you not have ipv6? Some cloud providers charge extra for ipv4!/nWould any Github/Microsoft representative tell us in which year, century or millenium will they support IPV6?/nWow, 2024 and no IPv6. Good job #GITHUB #MICROSOFT/nWhile the Czech government has announced a final date when they'll shut down support for IPv4, GitHub is still sitting here in 2024 without any signs of adopting IPv6.../nhttps://bgpview.io/search/github#results-v6/nhttps://xkcd.com/2881//nDoes that mean something? https://www.githubstatus.com/incidents/5y8b8lsqbbyq/nI created an app for us https://isgithubipv6.live/ so we can track the status\n/nGood news, they are working on it.\nhttps://www.githubstatus.com/history/nMicrosoft, their parent company, is asking for opinions how to improve their stuff - excellent opportunity to mention this and many other topics like no CLAT support for LAN interfaces + lack of RFC 8781 & RFC 8925 support on their desktop OS./nA week ago I provisioned a Hetzner Cloud server mainly to act as an exploratory/test platform for ARM dev and deployment./nWe have the same situation (Hetzner), but also AWS, which has started charging for IPv4 addresses this month at a rate of ~4 USD/address/month./nGithub had better not implement IPv6 or it will break my workflow: in my scripts I always use github.com AAAA to probe if DNS64 is working./nThey are already further ahead, but apparently, gitlab also has problems with IPv6./n"
    },
    {
        "title": "Please keep \"Trending Repositories and Trending Developers\"",
        "url": "https://github.com//orgs/community/discussions/31643",
        "upvotes": "592",
        "body": "Please keep \"Trending Repositories and Trending Developers\"/nI agree! Especially the repositories part./nPlease do not remove it!!/nThis is the most useful tab from the Explore family./nDo't remove it \ud83d\ude1f/nI also like to watch the trending tab almost daily. It helps me discover a lot of new and interesting projects./nwhy would they do that./nThere's \"low usage\" and then there's \"low usage but also critical to key people\". How else will we find the same information? If there's a simple answer then it can go, but otherwise you're removing an essential feature for some people./nThis page is very useful for discovering new projects and repos (also old ones \ud83d\ude03 ). It provides a very important way to interact with the platform. Please consider keeping the page./nPlease don't remove it. It runs automated, so it's not like you are spending too many resources on maintaining it.\nIt helps us to know what people find interesting nowadays. Otherwise how we are supposed to know that?/nThe Trending Repositories is a good thing to keep, but don't see why they should keep the Developers Trending./nI agree with everyone else, we need to keep the trending tab. I use it all the time to find popular projects./nI've been using the repositories page every day for a couple of year now, and I'll be really sad to see it go./nPlease keep Trending Repositories. It\u2019s the best way to keep track of the ever changing landscape around different tools and libraries./nWhat the heck?? I visit trending repos like three times a week. Don't remove it!/nPlease, keep!\nIt's part of my morning routine!/nKeep it, I discovered so much useful applications / repositories ! I browse it everyday !/nWhat.. One of my most used features on github.com. My way of getting knowledge of trending technologies./nPlease, don\u2019t remove, I use it mostly everyday for last 3-4 years/nBoth features are pretty useful for me in discovering new repositories or new developers./n+1 Please don't delete it, not sure what metric is used to mark this as \"deprecated due to low usage\" - Me and many of my peers use this page frequently/nPlease keep \"Trending Repositories and Trending Developers\"/nPlease keep this Trending section/nPlease keep the trending page.\nits the best way other developers can explore new OSS Projects/nThe person behind this decision should step forward and give an official (preferably honest) explanation why Trending needs to be removed./n/n@lafin Hi, can you please integrate this image/message at the end of your first comment?\nIt shows an obvious and effective solution that would make github.com trends even more useful and impactful than it already is\nhttps://github.com/orgs/community/discussions/31643#discussioncomment-3538615/nI use trending page very often and it is my the most favorite page on GitHub.\nAfter remove it I probably lost reason why to go here and probably I will migrate to: https://codeberg.org\nwhich looks as a very nice alternative to GitHub and it is open source, non-profit and community respectful project./nhttps://github.com/orgs/community/discussions/31644#discussioncomment-3539690/n"
    },
    {
        "title": "Make issue forms available on private repositories",
        "url": "https://github.com//orgs/community/discussions/4264",
        "upvotes": "558",
        "body": "I want to be able to use issue forms within my private or internal repositories./nYes, it would be extremely useful in the enterprise cloud environment!/nThis would be certainly a great addition for private repos as well. I work for a fintech company, where strict audits take place./nWe are using IssueOps for provisioning of cloud/SaaS resources to teams in our GHEC organization. The purpose makes clear why those repos cannot be public and access needs to be restricted to authorized members of the organization./nWhat was the reason for restricting this feature to public repos only? We already have markdown templates stored in our .github repo and those are available for use in private repos, so I do not understand why issue forms would behave any differently. \ud83d\ude15/nI would love to have this functionality for private repositories. Thanks!/nI just spent a couple hours (ok, so maybe I'm a slow learner) learning about this feature, configuring two form templates to gather needed info for issues, and setting up the config.yml file so users can choose the right form. It wasn't until I created a new file and copied the yaml into it that i noticed this warning: \"Issue form templates are not supported on private repositories.\" I see no mention at all of this limitation in the document I was following to learn how to do the forms (https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository). So.../nI would love to use issue forms in private repositories. I'm a game developer working on projects that are not open source, and issue forms would be incredibly useful for submitting bug reports, similar to the example shown in this video./nI'm software developer working on large private codebases. Issue forms would be incredibly useful for us... This features is \ud83d\udd25/nAfter banging my head against a wall trying to figure out why it wouldn't work... at the very least it should be flagged that this won't work on Private Repos @ https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository/nditto what everyone else has said. This feature just make sense. It improves on template markdown in so many ways. It's important to us to keep our internal processes looking professional and producing reliable results. So disappointing this is not available for our private repos. Thanks!/n+1 on all said above. We are more and more using Issues to work with our customers (Dev teams). This is becoming a support tool and having more control over how info comes in would be great./nI can understand offering this feature to public repositories first, but I don't understand why it wouldn't be offered for private repositories.  All of the structure/features the new YAML format provides would be useful for any repository, public or private./nEchoing what many above have said:/nHey @lukehefson, just wanted to see if there was a status update on this feature. Since the original question was posted in Jun and your last update was Sep 1. Our company transitioned over to using Github projects and issues as our sole means of Agile development and project management company wide for both developers and sales, marketing, etc etc back in July. While developers can handle the markdown some of our sales and marketing teams could really benefit from the straightforward forms./nWhile developers can handle the markdown some of our sales and marketing teams could really benefit from the straightforward forms./nHi @2percentsilk, @emmaviolet/nHi @2percentsilk, @emmaviolet/nBeen following this thread for quite some time...my organization is finally in a great place to adopt./nHi @2percentsilk, @emmaviolet/nHi @2percentsilk , @emmaviolet/nHi @2percentsilk, @emmaviolet,/nHi @2percentsilk, @emmaviolet/nHI @2percentsilk, @emmaviolet,/nFor those that haven't seen it - the public beta has been extended to all private repos, with the caveat that required fields are still turned off:/nIs this available for Github Enterprise Cloud?/nPerhaps a dumb question, will there be an API available to use for automation purposes?/n@azenMatt With all due respect, asking us over and over why we would want to require a field seems like game playing; it is extremely obvious (and has been stated here many times) that if you need the value of a given field in order to effectively/efficiently respond to input from a user then you need the ability to make that field required. So if we're going to be honest about this then we can only conclude that the reasoning behind preventing fields from being required is that your team thinks you know better than us how we should interact with our own users. In other words, you don't trust us -- your customers -- to make good decisions in form design to avoid alienating users. If you do trust us, then you'll enable us to do what we have explained over and over that we need to do: include required fields in forms for private repos. Thanks./nFor those of you who'd like to see the issue forms capability available via API (i.e. submit an issues form using GH's Issues REST API), here's a link to a feature request for that (made by geromegrignon Jun 30, 2021 and not yet responded to by anyone from GH):\n#4423/nWhen I attempted to set up a YAML form in our private GHE repository, I kept receiving a \"Issue form templates are not supported on private repositories.\" message in the file. Could that be specific to the implementation of GHE and not to the public capabilities?/n"
    },
    {
        "title": "Support --ignore-revs-file for blame view to support automated code formatters",
        "url": "https://github.com//orgs/community/discussions/5033",
        "upvotes": "552",
        "body": "When using automated code formatters to format a legacy project (read: code not matching an automated code formatter's style) it would be splendid to be able to make sure the commits related to the reformatting wouldn't be taken into account in GitHub's blame page./nLinking the 1-year-old github community post here\nhttps://github.community/t/support-ignore-revs-file-in-githubs-blame-view/3256/27/nNot only does this matter when updating legacy code bases, but also when updating versions of those formatters. I don't recall if there was a reason, but .git-blame-ignore-revs might be a common file name to commit to publish changesets to ignore./nThis is a really demanded and useful feature, especially for projects that are formatted after long durations - or formatters being changed. expecting a timely resolution of this :)\n@YashKumarVerma/nThank you for suggesting this! It would be such a valuable feature. It's currently on our backlog and we will give it high priority. I can't yet provide a definite date because we're still sizing it and determining how the blame UI should adapt./n@davidstaheli Thank you for acknowledging this./nCurrent thinking is that if a .git-blame-ignore-revs file is in the root of the repository, the blame UI will ignore the revisions in the file. Though we might start with only that, does anyone need more than that?/nTrying to understand this... Wouldn't it require the committer to have the discipline to use dedicated commits for changes triggered by automated code formatters?/n@dreamyguy For my case, we use auto-formatting in a couple of languages and individual commits often do shuffle things around, but those aren't that problematic from a git blame perspective because they're co-located with actual semantic changes. This feature is intended for large, repo-wide reformatting where modifications to files without behavioral changes break the blame chain./nUpdate: implementation of this feature is in progress/nUpdate:/n@dipree @davidstaheli Can we also ignore this commits in \"Reviewers suggestions\"? \ud83e\udd14  For example, @django-bot is suggested in Django in almost all PRs:/nFirst tests seemed to indicate that the revisions in .git-blame-ignore-revs are only ignored if the git blame is done from a branch, not a specific commit. Here are two examples from the https://github.com/Cog-Creators/Red-Lavalink repository:/nSo after thinking about it for a bit, I'm wondering... Could it be made possible to disable this feature when, for some reason, you would want to include changes from ignored revisions in the blame? The default should most definitely be to hide revisions specified in .git-blame-ignore-revs but I feel like not having a way to disable it will bite someone in the future.../nDid this literally just launch to non-private beta? I saw an inconsistency with the \"Learn more\" url form the notification - could have been cached?\nhttps://docs.github.com/en/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view now shows the thing I couldn't see before./n@dipree This seems to have broken the blame view for one of our files in an internal repo (fully empty blame view). Is there a bug tracker / known list of issues with the feature?/n@dipree Love it! It would be great if this file could also be loaded from .github/ so it doesn't have to clutter the root directory./n@dipree I tried it on our repo and it only works partially. The ignored commits still showed up but affected to less lines. Any advice?/nDoes this work with the new pull request interface? I have a repo where:/nIs there a way to opt out of ignoring the commits from the GitHub blame UI using a button or something? Folks might still be interested in taking a look at the ignored changes even if the .git-blame-ignore-revs file is committed to the repo.\nThis is in response to the concerns expressed in nodejs/node#43017 that adds the .git-blame-ignore-revs file to Node.js./nas coding standard change we use linters and formatter, which breaks GitHub blame/nAre there any plans to support git blame's related config options such as git config blame.markUnblamableLines true ?/nIt would be great if the GitHub Insights tab took the .git-blame-ignore-revs file into account. Or alternatively, it would be great if the GitHub Insights tab stopped counting file moves as a full rewrite of the file... Git itself does not count it this way, but for some reason GitHub does. This means trivial refactoring to the project's directory structure result in outsized impact on the GitHub Insights data./n"
    },
    {
        "title": "I don't see stars and fork given on my repos anymore",
        "url": "https://github.com//orgs/community/discussions/66165",
        "upvotes": "519",
        "body": "Product Feedback/nYeah... \"Are people using my thing?\", and \"How are people using my thing?\" is about the only bit of information I want to know from the feed. Yet there is no option to see if people star or fork things. -_- Instead it's a social media graph./nIt seems an unintentional glitch, given a filter for it exists.\n/nCame here to open exactly an issue like this one. GH, please fix!/nLooks like the old feed is still available for now: https://github.com/dashboard-feed/nHaving a toggle to choose which feed (the previous, \"simple\" feed versus the new, algorithmic feed) would be great - perhaps making the https://github.com/dashboard-feed mentioned above more findable would be a decent starting point./nAbout say the same thing....\n@github Please roll back the new changes to the feed/n+1/n\ud83d\udcaa Using this script you can restore the old version of the feed.\nhttps://github.com/wangrongding/github-old-feed/nnow we only stars given by people I follow to other repos/nCan we please role this back? I don't care what other people are doing to be honest i just want to know the people that are using my repos.../nAh yes, the classic Microsoft regression. Update a feature, make it less useful. Thanks!/nThis reminds me of LinkedIn killing itself by turning into a social media platform. Good to see another useful product holding a gun to it's own head./nJust want my voice to be heard, so I'm leaving a comment in here too. You took the only interesting thing from my feed/landing page, making that awkward landing page even less useful than it already has been./na terrible update/nYup, not seeing any stars that were just there the other day....something is broken.../nI want to see how people are interacting with my repos. The old feed was great and showed exactly what I wanted to see. The new one is 100% useless./nLike many here, I found it useful to see how people were using my work via starring my repos. Showing activity from people I follow was also useful, as a colleague or friend that starred a repo might be relevant or interesting to me. Anything beyond that quickly becomes a distraction and a potential time-consuming rabbit hole...i.e. I come to GitHub to do work then get distracted by something completely unrelated to that./nThe only thing I care about is people starring/forking/otherwise interacting with my repos, please fix/nSame here. Only a week ago, I was seeing everyone who starred my repos (any people, not just ones I follow). Now, with the Stars filter only, all I see is this one star by someone I follow, who didn't even star one of my projects./nMy feed is now empty because I tried to filter out everything except who stars my projects. Came here after wondering if there's something wrong with the feed. An exceptionally stupid update.../nThe same issue, stars and forks are not displayed on my feed/nStars and forks are no longer displayed on the feed rendering it useless./nWho asked for a feed of random events happening in random repositories you've never expressed any interest in? Why would I care that someone uploaded some binaries or opened an issue in a random repository? Was there a single person that requested this feature, or was this born in the mind of some MBA at Microsoft?/nWith the below options selected things seem to go back to normal!/nall forks still missed in my feed/nI don't see my repos getting starred either anymore. It looks like the feed stopped updating a few weeks ago, entirely./n"
    },
    {
        "title": "Option to mark reusable workflows as templates to not show them under the \"Actions\" tab",
        "url": "https://github.com//orgs/community/discussions/12025",
        "upvotes": "519",
        "body": "We use several templates for our workflows in form of reusable workflows, that we never call for themselves, but only call as reusable workflows./nYes, I agree that this would be a useful improvement.  Thanks for the feedback./n+1 to this. The UI for Actions is already bad enough and not able to hide reusable workflows is very annoying./n+1 to this. Having the reused-only workflow in the tab is distracting./nI'd be super keen for this too! I tried burying the reused workflows at the bottom of the list but unfortunately doesn't seem easily possible due to the way the list is sorted.\u00a0Maybe it should hide the workflow if it only has on.workflow_call?/n+1/n+1 to this !/n+1/n+1/n+1/n\u041c\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u043c\u043e \u043a\u0456\u043b\u044c\u043a\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0456\u0432 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u0440\u043e\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0456\u0432 \u0443 \u0444\u043e\u0440\u043c\u0456 \u0431\u0430\u0433\u0430\u0442\u043e\u0440\u0430\u0437\u043e\u0432\u0438\u0445 \u0440\u043e\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0456\u0432, \u044f\u043a\u0456 \u043c\u0438 \u043d\u0456\u043a\u043e\u043b\u0438 \u043d\u0435 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u043c\u043e \u0441\u0430\u043c\u0456 \u043f\u043e \u0441\u043e\u0431\u0456, \u0430 \u043b\u0438\u0448\u0435 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u043c\u043e \u0431\u0430\u0433\u0430\u0442\u043e\u0440\u0430\u0437\u043e\u0432\u0438\u043c\u0438 \u0440\u043e\u0431\u043e\u0447\u0438\u043c\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0430\u043c\u0438./n+1/nPlease use this GitHub feature to show that the feature is important, but please don't write +1 every time./n+1/n+1/nIt could be a generic hide/show switch, rather than logic checking if the workflow is reusable without other triggers. More flexible and less error prone.\nConsider for example/nDo you happen to have any updates @github? We have tons of reusable workflows and a single main workflow. This issue was raised in 2022, about two years later, and no news. Are you considering doing something about it, or silence = we do not care?/nGitHub: Any news on this? No news = good news?/nIt might be worth keeping an eye on this from the public roadmap: github/roadmap#841/nHere's what GitHub Action looks like in product for our team members:\n/n2024 and we are still here, please allocate one dev a week to implement this small UI feature/n@ja-leo @P1119r1m @h2oearth @troyere/n+1, joining the reusable club and my boys will get really confused if thy need to run something by hand because of this/n+1, would love if this was implemented/nI'm shocked that it still hasn't been added \ud83e\udd2f/nI wanna use this feature, too./n+1 fwiw/n+1/nSeems to be a lot of support for this feature, any word on roadmap?/nFor all the +1 remember this https://github.com/orgs/community/discussions/12025#discussioncomment-3978445/nIt's been 2 years since the original comment so at least some form of response from @github on if this will/will not be implemented would be appreciated at this point/n"
    },
    {
        "title": "Default merge strategy (per org, repo or branch)",
        "url": "https://github.com//orgs/community/discussions/20583",
        "upvotes": "518",
        "body": "In our GitHub organization we have a workflow where the preferred merge strategy is Squash and merge. Whenever we merge into master, we usually use this strategy. We would like to be able to set this as the default merge strategy, without removing the options for Create a merge commit and Rebase and merge for special occasions. Currently the only way to set Squash and merge is to disable the other options. This is problematic, since we sometimes need to merge using other merge strategies in special cases, for example if the PR closes multiple issues, and we want one commit per issue it solves. Another thing that makes this hard is that currently GitHub selects the merge strategy based on what you selected ln your last PR. This means that when an unusual option is selected, the user needs to remember to change it back to the \"default\" so that he/she doesn't accidentally merge with the wrong strategy on their next merge. This is a big source of user errors, and can lead to multiple hours spent trying to fix the (sometimes irreversible) mistakes done by choosing the wrong merge strategy. Instead of having the default be the last selected strategy, it should be possible for repository admins to select which merge strategy is defaulted to./nMake totally sense, +1 for such improvement/nIt would also be interesting to have the option for users to define a default strategy./nA default strategy per branch is a good improvement, but I'd rather completely disable certain strategies with certain branches./nIt's pretty annoying to not be able to have different merge strategies per branch. We have repos where we use a strategy of merging PRs into a develop branch, and to release we merge develop into main. We want to enforce squash merge from PRs into develop, but never squash merge from develop to main because then git gets very confused about what has already been merged./n+1/n+1/n+1 - Very useful for open-source projects with multiple repos/n+1 - very useful for project with env specific branches/n+1 This would be very helpful to companies using different merging for lower environments than those used in the upper envs./n+1.  This is absolutely necessary. If I have master, release and develop.  Then I only want to allow squash merge into develop (I usually like 1 commit per change rather than 50 or more, which gets messy imo).  Rest needs to be regular commit.  Otherwise the github compare mechanisms starting thinking there are missing commits and it does not work well./n+1/n+1/n+1/nother relevant issue that is very similar to this one \ud83d\udc49 https://github.com/orgs/community/discussions/10809/n+1/nPlease stop posting \"+1\" comments./n@vintagesucks, you're correct. At the same time, rules are recommendations if not enforced./nI want something similar which is to either set a default strategy, or enforce a different merge strategy per branch./nBeen missing these features for many years./n+1/n+1/n+1 would love something like this where you could select a default merge type based on a pattern match for the source branch. And obviously I could also see it useful if there was an ability to match a pattern for the target branch as well./n+1/n+1\nIt is a very necessary feature. Having all the merge possibilities available is a risk that could be solved with defining merge strategies depending on the branch./n+1/n+1/n+1/n+1/n+1/n"
    },
    {
        "title": "Comment on Files in a Pull Request (Beta) Feedback",
        "url": "https://github.com//orgs/community/discussions/49954",
        "upvotes": "488",
        "body": "Commenting on a file in a pull request (not just a specific line) is available in public beta now generally available./nThank you for adding this feature, I typically leave general comments linked to the bottom line of a file; it'll be much nicer to leave a more general comment. \ud83d\ude4f\ud83c\udffb/nLove this! This is going to be super useful \ud83e\udd73/nLove this direction! Feedback: It seems that leaving a file-level review comment on a deleted file right now shows that comment as Outdated and isn't displayed in the file view, only being visible in the conversation timeline./nThis is super useful, previously I needed to add generic comments mentioning files, now this will point to the exact file \ud83d\udc4d/nI've always wanted this! thank you for adding it!/nThis is great!/nNice - thanks for implementing this!/nAwesome!/nGreat!  \ud83d\ude80/nHurrah! (A related ask: Can we get keyboard shortcuts to initiate a code comment--on a line or a file--when reviewing? Thanks.)/nA nice feature, I was adding comments for the first line of the file before \ud83d\ude2d/nAwesome feature..!!! I just used it on a PR./nReally nice! Long awaited feature on my end!/nThis will be great! There is a z-indexing issue currently.\n/nLooks great! until now I either left a comment on the 1st line or in a random place stating this it's not related specifically to this line \ud83d\ude48/nwww/nThank you for introducing this feature. \ud83d\udc4f   I believe this feature will be especially useful to newly onboarded engineers who need to ramp up quickly. By allowing all previous discussions to be posted as comments in the corresponding files, it will be much easier to understand the business logic involved./nSince this is in Beta, it'd be nice to be able to suggest File Renaming, I believe there is no such suggestion capability./nThis is a gigantic help for me and my team. Thank you/nThanks for the great feedback and overwhelming response to this feature! It's now generally available and also now available in GitHub Mobile./nBug report on files review -- wrong z-order of \"Comment on this file\" popup hint:/nAnother bug report: wrong text hint on pending comments amount (if you move mouse over the number):/nToday I ran into an issue. If I try to comment on a file while viewing a single commit in a PR, the comment area tries to open, but nothing is displayed./nOn a related note: check annotations that are addressed to files (line 0) don't show up at the bottom of \"Files changed\"/nWhen you leave a comment on a file, it's marked as outdated immediately after any (!) push. I don't think it's convenient. Comments at the file level are more \u201chigh-level\u201d, so they should not disappear with frequent changes, this is annoying. For now I continue to leave comments on the first lines of the file./nThe PR view of a comment on a renamed file doesn't include the old filename, which is really problematic as I'm often commenting to show how a filename changed, consider dotnet/fsharp#16212 (comment):\n/nIs it possible to leave file-level comments on a Pull Request when viewing/managing that PR from the context of Github's browser-based code editor (can be opened by pressing . when viewing a PR)?/n"
    }
]