[
    {
        "title": "Actions FAQs",
        "url": "https://github.com//orgs/community/discussions/48283",
        "upvotes": "49",
        "body": "\ud83d\udea2  GitHub Actions helps you automate your software development workflows from within GitHub./nGitHub Actions Importer helps plan, forecast, and automate the migration of Azure DevOps, CircleCI, GitLab, Jenkins, and Travis CI pipelines to GitHub Actions. Note that GitHub Actions Importer is currently available as a public preview. Visit the sign up page to request access to the preview./nHow do we contact Support about problems with standard Actions runners (such as the ongoing random networking issues since the beginning of 2023)? The Support page appears to not consider that there might be reportable problems with Actions there and so just leads back here./nJust checked the documentation and in this part https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-contexts should the \"run\" command be like:\nrun: 'echo \"This event is a pull request that had an assignee removed.\"'/nI have a question about the events. I understand that we define the event that triggers the action in the workflow file but is there any way to limit and check what event was triggered in the action repo itself?/n"
    },
    {
        "title": "Public Beta Feedback - Actions streaming logs with backscroll",
        "url": "https://github.com//orgs/community/discussions/89879",
        "upvotes": "131",
        "body": "/nloving it so far <3/nOn page reload or coming to job logs during the job execution, usage of \"Show timestamps\" feature displays all the previous logs at the timestamp of initial loading on page open. To get actual log line timestamp you have to wait for job to finish.\nWould be great to have actual timestamps on logs initial load./nMaybe in the future we could have a kind of report showing which jobs are consuming more runtime computing./nHey, sounds like a useful feature! I currently have the issue where no logs for a job show up until it completes./nThis isn't showing the logs at all for me in our workflows now. I just see \"Error:\" in red any time I expand a step to try to see the logs./nThis is one thing which has been frustrating me for quite a while.\nI don't have to worry about accidentally closing the tab anymore.\nThank you./nI've been noticing an issue viewing the actions while they're running. For some reason it won't let me see the output of the job's steps until the entire job is complete. I'm using Firefox and Chrome on MacOS Sonoma 14.2.1\n/nHi. I see job steps are misplaced, and no log published until the step 'Run tests' is complete. I don't even see if that step is running./nI love this feature, previously we had to wait for the jobs to complete before we could see the logs/nI don't recall being asked if it was okay to run experiments in my production build environment.  NOT COOL AT ALL.  I have builds hanging now, it might be me, it might be you.  I don't need this.  If you feel like experimenting, experiment on free accounts, not things labelled ENTERPRISE./nSame feedback as @alexv-smirnov above regarding in-flight step being out of order + no way to see its running logs/nHmmm can't see logs, how to disable beta\n/nhttps://webapps.stackexchange.com/questions/173612/is-there-a-screen-which-keeps-the-current-action-logs-for-the-latest-push-on-g/nWhen execution in progress, loading of logs stuck in between. Observed this 3-4times in Beta version and execution takes logner than expected./nGood./nI'm a teaching using GitHub Classroom and this change to the logs are terrible for the learning of my students. Previously the logs would should a lot of detail in the output, such as the exact error message when running JUnit tests through an ant script. Now all they see is the line on the build file that failed, but none of the other output that used to show up./nhttps://jitpack.io/com/github/liujingxing/XmlClassGuard/1.2.6/XmlClassGuard-1.2.6.pom/nIts been over 3 hours and not a single runner. Still no runners even as I write this. While its free, I totally get that, over 3 hours waiting for a single solitary run is a bit much. I am the one that cancelled the job, not the server./nIt seems we have big issues just seeing our logs. I don't know if this is related but we have a step to connect to a VPN and after this step, none of our steps have its collapsable component. We always have to download the raw logs to view what happened in there./nCan't see progress for truncated logs./nWe have the issue (especially when starting long running terraform plan or apply), that we do not see any progress during run; we only see the full log which seems to be returned as a bulk log as soon as the command finishes. This behaviour seems to apply for other commands as well but is most obvious for terraform.\nMoreover the order of the logs on error seems to be wrong. The error is displayed before the regular terraform output./nCan we get a single button on the main page to just instantly re-run failed tests / checks instead of digging through the weeds to do so/nI'm generally interested in monitoring the progress of just one of my steps, but this feature jumps me to whichever step was currently in progress, and it's usually the wrong one, so I end up closing the trace of that step.  I'd rather just click on the one I'm interested in.  It would be helpful if it would remember my click if the step hasn't started yet, so when that step does start, I am instantly monitoring it./nWould it be possible to add a way to give manual approval for example for Terraform apply?\n/nIt is very annoying to scroll down thousands of lines produced by https://github.com/github/codeql-action/blob/main/analyze/action.yml/nNow black log pane exceeds width of my ungoogled Chromium browser window ~800px/1920, and now shows a horizontal scroll bar at the bottom of my browser window, not the log pane, which I have to use, before I can see to select the tool gear icon, then pick Download log archive./nOne has to expand the steps within a run for the search bar to pick up the logs within that step. I think it should search through the whole logs, regardless./nIt usually masks too much data and especially useful debugging data that has no correlation to the actual secret.\nYou could in theory reconstruct the secret because of this kind of masking.\nWould it be possible to give the ability for the user to disable or set a level of output masking?\n/ng'day. Some feedback./n"
    },
    {
        "title": "GitHub-hosted runners: Double the power for open source",
        "url": "https://github.com//orgs/community/discussions/101499",
        "upvotes": "3",
        "body": "\u205f\nHi Community citizens!/nHello, great news for open source!/n"
    },
    {
        "title": "Actions new ship \ud83d\udea2  - macOS 14 (Sonoma) and the new M1 macOS runner",
        "url": "https://github.com//orgs/community/discussions/102846",
        "upvotes": "5",
        "body": "We're excited to announce the launch of a new M1 macOS runner and introducing the new M1 macOS runner available to open source!/nThank you! My build time is cut in half now. I hope many missing (native) arm binaries will be finally published./nFirstly, I'd really like to thank Github for making M1 macOS runners available! They are incredibly useful!/nThis is awesome! \ud83c\udf89 Similar to the above, I tried to use this in this PR and I encountered:/n"
    },
    {
        "title": "And...Action! [GitHub Actions check-in] \u25b6\ufe0f",
        "url": "https://github.com//orgs/community/discussions/103166",
        "upvotes": "3",
        "body": "/n"
    },
    {
        "title": "Feedback Requested: Actions Usage Metrics",
        "url": "https://github.com//orgs/community/discussions/114515",
        "upvotes": "7",
        "body": "Today, we are thrilled to announce that Actions Usage Metrics is available in public beta for GitHub Enterprise Cloud plans. \ud83c\udf89/nLooks great already!/nReally nice! There are three essential things missing that we'd love to see:/nGreat work !!/n"
    },
    {
        "title": "Parallel Steps",
        "url": "https://github.com//orgs/community/discussions/14484",
        "upvotes": "1227",
        "body": "Hi,/nI'd like that too. There are scenarios where it doesn't make sense juggling artifacts between jobs.\nThis would be greatly helpful for self-hosted and bigger runners too, where you can have many cores and handle parallelism well./nAlternative solution:\nWe can convert steps into actions, and then use reusable workflows to solve the problems you said/nHi,/nLogging into docker in parallel is probably going to result in things exploding./ncan we have the parallel steps please/nThe BitBucket has parallel step options. Why not add this option to GitHub actions?/nThis is the biggest pain point we've run into coming from Jenkins. You can approximate this feature with cache, artifacts, and matrices but it's considerably slower, more costly, and error prone./nNeed parallel steps support for our scenario: deploy multi clusters concurrently within the same VPN environment. So it is convinient to achive in steps rather than actions or jobs/nUsing a yarn monorepo I'd like to:/nIf its easier, GitHub could also allow sharing jobs workdirs/nI just want to start a resource in a background, which needs some time to start, eg a docker container or a simulator. This resource should start during the job start. My test step should wait until the test resource is available, or fail after an (optional) timeout./nNote how it was implemented in Cloud Build many years ago yet it's super convenient syntax:/nAs a workaround I was able to use this\nhttps://github.com/marketplace/actions/distributed-task-runner/nHi. Are there any updates on this topic from a Github team member ?\nReading the thread it seems like a strong painpoint./nWould be great to have some updates here. Parallel steps would be great, plenty of instances where for example I'd like to know whether multiple steps fail (eg: a lint check as well as unit tests). While jobs can run in parallel, each needs to be setup again. Would be great for a pipeline to be able to run a setup step that for example pulls dependencies and then splits off in parallel steps each starting from the state left by the setup.\nBitbucket is able to do this, for example./nWould be awesome if we can, for example, compile our js/css files at the same time we are running composer (for PHP projects)./nJust wanted to add, that parallel jobs means waiting for multiple available workers, which can add a lot to the total build time, and in some cases you don't need the extra hardware./n"
    },
    {
        "title": "[Feature Request] Allow github actions to bypass branch protection rules in certain specific circumstances",
        "url": "https://github.com//orgs/community/discussions/13836",
        "upvotes": "1039",
        "body": "There are workflows in which it is desirable to have the workflow itself make changes (such as updating a pom.xml, packages.json, CHANGELOG.md, etc.) on a branch which is otherwise protected from direct changes./nAlso mentioned and requested here: https://github.community/t/allowing-github-actions-bot-to-push-to-protected-branch/16536/nEven though it wouldn't work in all use cases for all people, treating the github-actions bot as a full-fledged app so we can add it to protected branch pushers would be immensely useful in a number of situations./nFYI: https://github.blog/changelog/2022-05-17-consistently-allow-github-apps-as-exceptions-to-branch-protection-rules/nJust encountered this exact issue. This is certainly great to have for smaller hobby teams as well where you don't really want nor need to setup whole delivery pipelines.\nI have setup simple automatic deployment on main which commits some changes like assembly version bumps, changelog, etc. However, I have to remove the branch protection for it to function which is bad for collaborations./nYes, GitHub, let's get this feature in please./nWould also like this implemented. \ud83d\udc4d/nThat would be a great GA to implement!/n+1 I had to implement a walkaround to cater for such requirements which I do not encourage following.../ndoes this fit your need ? https://github.blog/changelog/2022-08-18-bypass-branch-protections-with-a-new-permission//nAlso interested in a solution - I'm trying to auto bump the version but the branch protection rule I have on main branch doesn't allow it./nAlso looking for a solution! I have a python-black formatter that pushes code to the main branch but the protection rules won't allow it/nI'm running into this issue as well. I use semantic-release to automatically update my package whenever my main branch is updated, and I use @semantic-release/git to commit the updated version and changelog back to the branch. However, I also want to enable required status checks so I can have that peace-of-mind (and also use auto-merge). But I can't, because if I turn it on the action can't push the version update anymore. Having a setting (either in the branch protection rules as suggested above, or in the action itself using the new permissions setting) would be a huge help for getting my setup clean and efficient./nCan we bypass the permission rules with Gitbook?/nAs a simplification of the \"service user\" approach outlined by the OP: for the commit(s) pushed by the \"service user\", one can consider using [skip ci] to suppress status checks without adding any extra rules in the workflows (see https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs)./nGithub, this is a need for full automation after deploys.  PLEASE consider this soon./njust ran into this today...\n+1/n+1/n+1/nPlease stop Posting +1 comments. Those are ignored. Instead, upvote the initial post./nLike most resources on GitHub, commenting that you support the issue without any meaningful addition to the conversation only functions to notify people that also are unable to fix the issue in most cases./nHey everyone!\nAfter many many many attempts, I found a way to overcome this GitHub limitation./nNow you can use a GitHub App to bypass certain controls in branch protection rules or newly introduced Repository Ruleset depending on your requirement./nWe had the same issue and we were not able to push because at least 3 checks are required. Our problem was, that we run the git pushcommand like this:/n+1/n+1/n+1/nNeed this/nI was able to work around this deficiency by using the Github App approach discussed above. I had never created an app before, so here is the list of steps that were necessary for anyone looking for something a bit more comprehensive:/nI'm not sure I understand. GitHub does not want to resolve this, because anyone would be able to deploy to protected branch by creating a workflow file (comment here @chrispat)/n+1/n"
    },
    {
        "title": "Option to mark reusable workflows as templates to not show them under the \"Actions\" tab",
        "url": "https://github.com//orgs/community/discussions/12025",
        "upvotes": "520",
        "body": "We use several templates for our workflows in form of reusable workflows, that we never call for themselves, but only call as reusable workflows./nYes, I agree that this would be a useful improvement.  Thanks for the feedback./n+1 to this. The UI for Actions is already bad enough and not able to hide reusable workflows is very annoying./n+1 to this. Having the reused-only workflow in the tab is distracting./nI'd be super keen for this too! I tried burying the reused workflows at the bottom of the list but unfortunately doesn't seem easily possible due to the way the list is sorted.\u00a0Maybe it should hide the workflow if it only has on.workflow_call?/n+1/n+1 to this !/n+1/n+1/n+1/n\u041c\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u043c\u043e \u043a\u0456\u043b\u044c\u043a\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0456\u0432 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u0440\u043e\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0456\u0432 \u0443 \u0444\u043e\u0440\u043c\u0456 \u0431\u0430\u0433\u0430\u0442\u043e\u0440\u0430\u0437\u043e\u0432\u0438\u0445 \u0440\u043e\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0456\u0432, \u044f\u043a\u0456 \u043c\u0438 \u043d\u0456\u043a\u043e\u043b\u0438 \u043d\u0435 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u043c\u043e \u0441\u0430\u043c\u0456 \u043f\u043e \u0441\u043e\u0431\u0456, \u0430 \u043b\u0438\u0448\u0435 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u043c\u043e \u0431\u0430\u0433\u0430\u0442\u043e\u0440\u0430\u0437\u043e\u0432\u0438\u043c\u0438 \u0440\u043e\u0431\u043e\u0447\u0438\u043c\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0430\u043c\u0438./n+1/nPlease use this GitHub feature to show that the feature is important, but please don't write +1 every time./n+1/n+1/nIt could be a generic hide/show switch, rather than logic checking if the workflow is reusable without other triggers. More flexible and less error prone.\nConsider for example/nDo you happen to have any updates @github? We have tons of reusable workflows and a single main workflow. This issue was raised in 2022, about two years later, and no news. Are you considering doing something about it, or silence = we do not care?/nGitHub: Any news on this? No news = good news?/nIt might be worth keeping an eye on this from the public roadmap: github/roadmap#841/nHere's what GitHub Action looks like in product for our team members:\n/n2024 and we are still here, please allocate one dev a week to implement this small UI feature/n@ja-leo @P1119r1m @h2oearth @troyere/n+1, joining the reusable club and my boys will get really confused if thy need to run something by hand because of this/n+1, would love if this was implemented/nI'm shocked that it still hasn't been added \ud83e\udd2f/nI wanna use this feature, too./n+1 fwiw/n+1/nSeems to be a lot of support for this feature, any word on roadmap?/nFor all the +1 remember this https://github.com/orgs/community/discussions/12025#discussioncomment-3978445/nIt's been 2 years since the original comment so at least some form of response from @github on if this will/will not be implemented would be appreciated at this point/n"
    },
    {
        "title": "Feature request: concurrency to queue all jobs waiting on a group",
        "url": "https://github.com//orgs/community/discussions/12835",
        "upvotes": "438",
        "body": "citing the example mentioned here/nHi @Shereef - thanks much for the feedback. Our initial design was focused on deployment scenarios, but we want to address the use case that you've outlined. I appreciate you outlining this so nicely and providing these suggestions. I hope that this is an area that we can address in the future./nThe desired behavior here, I believe, would be for jobs with the same run_id to be canceled (either in_progres or in_queue), whenever a new incremental run_id is present on the same ref./nI think I just need the same, but add to a queue instead of cancel the workflow. I meant, don't run un parallel but in serial instead/nWas surprised to see that canceling previous runs was the only option officially supported -- waiting and executing sequentially is what I need and seems to me like a clear usecase (canceling a deployment could result in a broken state)/nWould be great to be able to queue workflow runs (ideally without consuming action minutes). Was surprised that new runs cancel existing ones by default./nWe hit this limitation while testing out the Merge Queue feature that is currently in limited beta. Our use case is ensuring that only one workflow is running for the PR at the top of the merge queue. When concurrency is set at the workflow level (for the merge_group event type) and multiple PRs are queued within the merge queue, the system cancels queued check suites once a new PR is added to the queue. It would be fantastic if we had the ability to disable canceling queued jobs!/nIf you're using self-hosted runners, a workaround/hack we used was to label one of these runners specifically, and then make all the jobs that need to be in a concurrency group just run on this labelled runner instead. No concurrency shenanigans. That causes them to queue up globally across all workflows without any caps on number of waiting jobs./nMy team also needs this feature./nMy team also needs this./nMy team also need this feature - mainly for queueing mulitple actions each with Terraform plan/deploy steps which cannot be run at same time due to a lock on terraform state./nA must have for my team/nReally needing this to be implemented./nNeed this feature too./nGitHub, I'll add my team's need for this feature as well. I see a LONG list of replies like this, with no response from GitHub. (I'm in DevOps.)/nThanks for the feature request, we need this feature/nWe need this. I've implemented a feature where we don't duplicate builds or tests for the same set of files on different branches.\nSo the concurrency is on the ALL_FILES_HASH (.git files not included), and can borrow the job results from other builds./nI am astounded that this isn't yet possible.. Coming from Azure DevOps it seems like an actual oversight./nWe have multiple environments that we deploy to. As a precaution, the first step in each deploy process is to check if the build asset exists and to build the asset if it is missing. To prevent multiple processes from clobbering each other in the case that the asset needs to be built, we control the build step and only the build step with a concurrency group./n+1 for ability to set cancel-in-queue: false/n+1 for ability to set cancel-in-queue: false/n+1 for ability to set cancel-in-queue: false/n+1 for ability to set cancel-in-queue: false/n+1 cancel-in-progress : false/nDon't upvote by posting a comment, just click the upvote button on the original post. Comments notifies/spams everyone subscribed, who are awaiting progress updates, which upvote comments are not./n+1 \"cancel-pending:false\"/nAnother usecase for this would be to process a larger amount of pull requests (like from dependabot or renovate) in a sequential manner./n+1 \"cancel-pending:false\"/n"
    },
    {
        "title": "add timezone support to scheduling workflow runs with cron",
        "url": "https://github.com//orgs/community/discussions/13454",
        "upvotes": "433",
        "body": "Originally brought up at actions/runner#1423, but I don't think anyone actually started a discussion./nWhy isn't this implemented yet? gitlab is already having this functionality afaik/nAny existing workaround? Also, I see that the workflow is sometimes not triggered at all even though I have my own runner which is in idle state./nThanks for the feedback @cj81499. I certainly agree that time zones and scheduling is tricky, so I'll make sure that this is on the backlog./nWe are also interested in this feature. Are there any plans to implement a timezone support?/nJust bringing up another use case that would benefit with the addition of this, in case it further helps convince the addition of this feature./nAnother really useful feature would be to be able to add random jitter like cron supports because we can run into ratelimits when we have multiple actions running at the same time./nAs a super hacky workaround, you can schedule your workflow to run at BOTH standard and daylight times, and then use a bash script to filter out the undesirable runs. This means you'll have 2 runs for every schedule date, but only one of them will execute past the Test schedule step./nI've created a Workaround like @bcowdery, but mine won't fail the run:/nMy team continue waiting for this feature, do you know if GitHub team already have a ticket in progress to attend it? @cj81499 @rahulmr Thanks!/nThis is a much needed feature in GH, any updates on this please./nany progress on this feature? thanks!/nHi guys any updates on this?\nthanks/nI will add a bump here as well, did not expect my job to run at 5pm instead of midnight. Definitely would like to see this improvement./nSeems like easy to implement and would sove a lot of problem./nI am very interested in this feature./nI'm not sure why there are so many thumbs down reactions on these comments.  This feature would greatly improve usability and bring GHA in line with other cicd offerings.  Can we please get any indication if this has made it onto a backlog somewhere or if this won't be implemented?  Thanks!/n"
    },
    {
        "title": "Feature request: allow workflow configuration in sub-folders",
        "url": "https://github.com//orgs/community/discussions/18055",
        "upvotes": "400",
        "body": "Copying this feature request over from https://github.community/t/feature-request-allow-workflow-configuration-in-sub-folders/16776/nI was searching for a way to organise many workflows in the UI, like by category or by team for a mono-repo. And I was thinking about just being able to create subfolders in the ./github/workflow/ folder, and that each folder would appear as a collapsable section in the UI./nI was trying to do:/nIt would also be rather nice if there could be a way to run a workflow nested in a submodule, and then leverage that same submoduled workflow to work on the parent repository. This is definitely a much bigger ask than what the original discussion was most likely tailored for, but it would certainly come in use for a repository I currently maintain./nThis will help a lot my team for a mono-repo! I hope to saw this feature soon/nYou can do a lot of this by using a services/foo-service/action.yml and then put uses: ./services/foo-service/ into your .github/workflows/foo-service.yml./nA good workaround is symbolic links in your root directory .github/workflows folder/nThis feature would be awesome to have for  when using both re-usable workflows and the \"regular\" workflow.   Right now, I'm naming things with emojis in front of them to do this. \ud83d\ude02  It gets a little \u26a1  if it's a re-usable./nInstead of recursing through the whole repo, why not provide a keyword in the root .github/workflows that can be used to point to the \"sub-root\" of the directory you want to treat as it's own repo (for actions)?/nCopying this feature request over from https://github.community/t/feature-request-allow-workflow-configuration-in-sub-folders/16776/nThis would be a nice feature for our template projects, to make certain workflows optional and easy to tear out (with related scripts).  eg. \"Not using the event queue system?  tear out the workflow and related integration testing scripts by pulling ONE folder...\"/nalso running a monorepo and having workflow subfolders would be great as we have a lot of granular separation going on./nI've been following this thread for a while, if you're interest I made a simple cli in rust that can help with workflows context separation. Is still a WIP, nothing fancy. Hope this helps someone \u270c\ufe0f/nHas there been any progress made on this? Being able to define a .github directory within subfolders would be ideal,  however what @tn3rb suggested would also be great./nWe are using monorepo setup and our .github/worflows is getting out of control. Before Actions, we were using Buildkite and it allowed to add workflows in specific folders for services as suggested by the OP. The root workflow is getting too big and unmanageable and we are considering moving back to Buildkite just for this reason :(/n+100 on this. We're writing test workflows for our actions and workflows (25 and counting) and both workflows and test-workflows being next to each other all in a single directory is quickly becoming unusable./n+1/nWe're dealing with a monorepo, and our .github/workflows folder will soon become a bit of a jungle. Would love it if GitHub could let us use subfolders in there to tidy things up and keep our workflows in check!/nUsing Github workflows inside a monorepo that contains a lot of different environments with separate workflow file for each environment is becoming a mess now./nI am also running into this issue. We are currently transitioning to a monorepo structure and the lack of any kind of organization for all the workflow files is becoming an issue. If Github can't provide at least something as simple as subfolders then I am very tempted to just return to using Gitlab which handles this really well./n@chrispat/nWe've been migrating all workflows for multiple languages to reusable workflows and composite actions (whichever is more appropriate). It would be amazing to organize things with a better folder structure, even though this would mean we have to go back again and update 300+ repos, since the path to the remote workflow files would have changed/nYeah would love to see this feature added/nPLEASE.. this feels like such an obvious miss or the GHA team was strongly under the assumption any given repo would have <5 workflows./nStill not working./nAdjacent topic, but folders for Secrets would also be appreciated.../ncreate generic workflows that are heavily parameterized so as to compensate for having multiple workflows for each variation. This will reduce the clutter./nNeed this feature. It would help us to organize or distinguish the workflows & templates better. Hope to get the resolution for the error soon - invalid value workflow reference: references to workflows must be rooted in .github/workflows/nAboslutely needed , migrating from GitLab to GitHub is leaving our mono repos with reusable code without any folder structure and a complete mess/nWorking on converting to a mono-repository for a large game and indeed, without this it is really disadvantageous to not be able to scan subfolders for a .github/ yaml file./n"
    },
    {
        "title": "Actions: support YAML anchors",
        "url": "https://github.com//orgs/community/discussions/4501",
        "upvotes": "342",
        "body": "Please add GitHub Actions YAML anchor support./nUpvoted!/nUpvoted./nThere's an issue with even more upvotes here./nUp/nWe want YAML Anchor Support for GitHub Actions\n+1/n"
    },
    {
        "title": "Organization-wide Environments and Environment Secrets",
        "url": "https://github.com//orgs/community/discussions/15379",
        "upvotes": "318",
        "body": "If you have a lot of repositories with microservices deploying to the same environments (e.g. the same Kubernetes clusters, say), it can be useful to have a set of secrets available to all repositories in an organization. Of course, we already have this with Organization Secrets. However, this breaks down when some of those secrets - still common to many repositories within the organization - need to be distinct for different environments./nConsidering how organization level secrets are indirectly available to all users with write access, environments are the only way to protect sensitive secrets from attacks originating inside the organization (eg. stolen credentials). Without organization-wide environments, protecting sensitive secrets across multiple repositories is a huge pain./nThis feature will really reduce our work a lot. Please try to implement this./nPotentially the biggest improvement to GitHub in 2023 will be this (if it happens).\nIt is an absolute pain attempting to generate and manage environments in each individual repository.\nThis feature is sorely lacking and a definite blocker to adoption on our part!!!/nThis feature will help us a lot! Due to this limitation, we've had to use organizational secrets per environment like K8S_SECRET_DEV and K8S_SECRET_PROD, and have replicated our workflows./nThis feature would help us to avoid a lot of duplication. I would also add that in our case we need the approval to be defined on these environments as well./n+1 from me here - my use case is an Organisation that has multiple repos that host Terrafrom for Azure deployments - using github Environments / secrets for Service Principals / subscription ids etc. We have to duplicate secrets across the repos / environments . Just spent about an hour troubleshooting a missing one - so thats how i ended up here :-)/nHere is one more concern: Imagine we have \"development\", \"staging\" and \"production\" environments/nIs there any official plan on implementing organization level environment?/n+1 on this. It would be really neat to be able to have org-level env secrets. It would reduce a lot of copypasta one has to do across org repos to create same environment settings. Any plans on making this available at all?/n+1 on this. Do we have any updates if its even considered on a roadmap?/nthis++/n+1/n+1/n+1/n+1/nThis would be really handy! Upvoted above./n@philomory As far as I know there is such a feature./n+1\nThat would indeed remove a lot of administration and control when working with many repositories hosted in same servers..../n+1 it would really simplify lots of things/n+1. I was surprised that this functionality didn't exist when I went looking for it. Gitlab already has this I believe./n+1 How can this not be organization-wide?/nme too +1/nWe have considered not using Environments at all because they are not org-wide. It ends up being too much manual work updating them across repositories./nSince I first started watching this topic, I've had second thoughts. What we are asking for might be an anti-pattern./nme too +1./n+1/nOrganizational Environments could be configured via RuleSets and greatly simply GH org wide admin by centralizing which environments apply to which repos (i.e. using repo properties)/nThis is good idea to make those org wide. But imho they should first decouple environments from deployments so each job running with environment: name will not trigger deployment. Or at least an option to disable this \"feature\". There is multiple use cases where this is not desired and is really irritating./nOne simple way of implementing this feature would be to allow members to mark an organization secret as \"private\", and then manually select it for use in environments at the repository level (for each repository that needs it). It's the principle of reusability./nIt seems so intuitive that this would exist that I keep forgetting it doesn't./n"
    },
    {
        "title": "Is there a way to delete or hide old/renamed Workflows?",
        "url": "https://github.com//orgs/community/discussions/26256",
        "upvotes": "283",
        "body": "I made a Workflow using the Node CI template and then later renamed it.\u00a0 Now my Workflow list has \u201cNode CI\u201d in it, but that doesnt even exist anymore.\u00a0 Is there some way for me to hide it?\u00a0 Or is it there forever?/nYou can\u2019t remove it yet, but it won\u2019t be there forever.\u00a0 You can\u2019t delete it yet but we\u2019ll have functionality to delete this in the future./nIts been 3 months since this post?\u00a0 Can I delete yet? \u00a0 Its annoying that a typo leaves an action in the workflow/nHi,/nAny updates on that ?/nI got all excited when I saw this was marked as \u201csolved/go to solution\u201d. Then I found the solution was to wait as it would be fixed sometime in the future!\u00a0We could close all our issues right now with the same message \ud83d\ude09/n@ethomson wrote:/nHi, with all due respect this doesn\u2019t exactly \u201csolve\u201d the problem, is there any update or ETA on this please? Thanks/nWe really need this feature\u2026 Wanna get rid of those old experimental workflows./nHi, any ETA on this?/nHas anyone figured a way to clean them?/nAlso looking forward to seeing this.\u00a0/n@jakakokosar wrote:/nHey Guys, i see that many have asked this me also was going to ask, but i found a work around.\nyou can simply go to your repo home_folder/.github/workflows, Then delete the workflow that you wish to remove and commit \ud83d\ude09/nThis is not working. I deleted the workflow but still actions has all history of workflow executions. Currently there is  no way to get rid of this./nI tried this myself, make sure you push to github repo after you delete files related to workflow./nSince this thread has been marked \"Answered\" and there has been no development since, I'm pretty sure we're all just screaming into the void here./nYou can delete old workflows by deleting all workflow runs, and that in turn you can automate using CLI:/n\ud83d\udc4b Hey everyone - I'm a PM for Actions and I'm working on a set of changes that also include how/when deleted workflows show up in the list./nI'm not sure if this change came out today or earlier, but looks like a lot of my old, messy workflows have disappeared from the Actions tab on the repo I manage. \ud83e\udd73 This is more or less what mine looks like now:/nHi @ethomson, any updates regarding this issue ?\nThe only way to \"delete\" the workflow is to delete all the runs.\nIf we have many it's gonna be hard!/nJust a +1 to say I would like to see this issue resolved.  Thanks./nI've got a workaround./nCombining @dmitrym0 comment with the limit 500 in @maximbaz comment (because the default limit is smaller). Make sure you cd into the repo in question, and make sure you swap out stale-workflow.yml with the name of your actual deprecated workflow file. gh is the github cli./nI have a unique issue that is related. Our repo has no workflow runs of a now renamed (added .disabled to the end of the filename) workflow. Yet it still shows up in the list./nThe fact that this is a 5 year old issue is WILD \ud83d\udc80/nI have a unique issue that is related. Our repo has no workflow runs of a now renamed (added .disabled to the end of the filename) workflow. Yet it still shows up in the list./nI really want to delete old actions./nwould love to see this/nhttps://github.com/orgs/community/discussions/26256#discussioncomment-7295831/nI think you can do as follows./n"
    },
    {
        "title": "Using environment in github actions without creating Deployments",
        "url": "https://github.com//orgs/community/discussions/36919",
        "upvotes": "272",
        "body": "I have environment-specific secrets defined which I'd like to reference from my Action. I think this requires me to set an environment for the job. The problem is that it seems like as soon as I set an environment, there's no way for me to prevent an associated Deployment from being created, which I don't always want. Is there a way to access environment-specific secrets without having the job create a Deployment?/nwhat do you mean by accessing env variables? those are just there for your jobs to consume them, they are not triggering anything whatsoever, if you can share your yml would be nice/nHi there @connor-luna and welcome to our community \ud83d\ude04. Thanks so much for asking a great question!/nI would also love it if we could use Environments for setting up repeatable workflows without every Job that references an environment: in Actions triggering a \"Deployment\" message./nWe also find this frustrating. We run a number of environment-specific checks as part of pull request tests and they are shown in the UI as having deployed to environments where they have not truly been. It would be great to have the ability to distinguish \"prepare deployment\" or \"verify deployment\" or similar read-only operations from an actual \"deploy to environment\" update action./nSame frustration here. I need to access Environment secret for a Terraform Plan job, but of course nothing is being deployed at that stage./nSame issue here/nAnother thumbs up for this issue. It would be nice to get some feature that would let you specify if the workflow should create a \"deploy\" or not/nSame issue! I just want to have access to the variables per env./nsame issue, I have a workflow which deploys logic, and one which deploys infra using terraform - both use env secrets but now both look the same and cause \"deployments\" to be created.\nI want to be able to control it - ideally decide \"deployments\" are only created for one of them or at the very least control some label or text explaining what sort of deployment happened./nSame issue, for us we have a docker image hosted in ECR but only in our prod account. We want to use it as a service container in our PR workflow test job but we need to login to ECR and get the docker password and secret in prod. So we have a job before the tests job that uses the \"production\" environment to get secrets for logging in to ECR. We haven't deployed anything just need the outputs but now all our PR's have marks saying they were deployed to prod even though they haven't been. \ud83d\ude1e/nSame issue here, I'd like to decide when a successfully run action that references an environment creates or not a deployment. Mostly because I use environment over variables because they have approval./nsame problem, anyone have a workaround? it's super annoying to have a terraform plan always trigger a \"deployment\" when nothing is being deployed at all./nSame here. I'm doing a dry run (Terraform) deploy into the target environment as part of a PR but then says it was deployed. It seems like a missing piece of the puzzle./nSame issue./nWe have same issue here,\nTrying to create a workflow to build a front-end project with staging and production configurations in a matrix. there's no way to use the environment variables at the build time and prevent GitHub from assuming that it is deployed!\nProbably the easiest workaround is to hard-code the environment variables inside the matrix till GitHub resolves this issue/n+1 Is there any update on this? deployment: true would be ideal./nI mentioned this issue at a regional GitHub customers conference. So the GitHub employees are aware of this issue. Hope there'll be some feedback soon./nSame issue here in our company, anyone have a workaround for now ?/nBeen following this issue for a while, please fix!!! I don't want more deployments on my repos \ud83d\ude22/nI also want this. I don't think just adding environment: \"name\" should cause it to be classified as a deployment. That should be a separate flag or at least allow us to opt-out./nAs a workaround, we run a job at the end of the workflow to delete the deployments created by it/n+1 - I should be able to access environment secrets without opting in to manual approvals./nAlso ran into this issue, currently some services running the same images are deployed in parallel:/nThis is the same request as another discussion from a year earlier: https://github.com/orgs/community/discussions/5463/nAlso looking for a fix/nwould love to see a fix for this. why should I need to make a \"deployment\" to access the environment secrets context? pretty silly imo/nIdk whose idea was to tightly couple env scoped vars and secrets with deployments. This is such useful feature and those automatic deployments make it almost unusable. How hard would it be to make something like this work:/nSame problem here. Makes using GH environment a real pain. I can't believe this issue has been around for years and yet no fix was introduced./nSame here. Would love to see deployment: false implemented/ndeployment: false is much needed.  Our team is evaluating GitLab over the enterprise subscription we've paid for, because of how poorly Github manages environments (repo vs org level envs, RBAC for envs, and deployment protections) that are all critical for enterprise software development./n"
    },
    {
        "title": "Properly show continue-on-error jobs/steps in PR UI",
        "url": "https://github.com//orgs/community/discussions/15452",
        "upvotes": "249",
        "body": "continue-on-error is a very useful part of GitHub Actions, but unfortunately it's reflected extremely poorly (= not at all) in the UI and specifically in the pull request UI.\nThat means it's near-useless or barely better than || true, which is not the desired feature.\nThe desired feature is to allow some jobs to fail, and indicate it on the PR UI in a sensible way, much like TravisCI did with allow-failures: true./nThis perhaps depends on perspective. I had problems to understand continue-on-error first of all (and why it is not the same as || true which I was looking for using allow-failure on Travis before), which - like in your report - was related to the differences between Github Actions and the display of failed jobs in the PR checks./nThis is indeed a common technique I used frequently on Travis CI and Appveyor.  Here are links directly to the documentation stating one clear use case that this is for:/nNot having a proper allow-failures (same semantics as Travis) wastes so much time and causes so much confusion in the UI. Please fix it GitHub. 100% on board with all of the OP statements./n(reposting here from 399 as requested by @pboling)/nI have the same problem... My slack action is failing, failing the whole pipeline, although the rest worked... So the PR is locked... At this point, it's hard to believe Github Management is way too far from the community... This feature is definitely a very important ask and would allow us to bypass situations like the one described above.../nPlus one for all of the above. I'm working on fixing flaky tests in our code that cause CI to fail, which means I'm running many, many tests and constantly checking if they succeeded or failed. We have a GitHub check for CI and another GitHub check to flag tests that failed once but succeeded on retry. The \"succeeded on retry\" check is optional. My work would be greatly facilitated by the optional check not causing the build to be marked a fail./nEchoing what others are saying here, our use-case is very similar and connected to https://github.com/actions/toolkit/issues/399#issuecomment-1260017446. allow-failures would enable this./nI agree this would be a nice to have. +1 the allow-failure/nallow-failure and continue-on-error are two different features which are not mutually exclusive and in fact can be combined to complement each other (see below). As these are common semantics in every other CI system on the planet, Github should implement both, and we should stop squabbling over \"whether we should only eat apples or only eat oranges.\"/nUpdate: The closed issue has been moved to the appropriate, relevant, repository, and is where backlinks should point, even though it remains closed.\nactions/runner#2347 (comment)/nRegardless of whether continue-on-error is changed to work like allow-failure, or whether allow-failure is introduced as a separate option and the two are kept distinct, ultimately, we need allow-failure in some form.  More specfically: An allowed failure is one whose failure does not cause a failure of the level it's contained in.  If one job fails, but it's an allowed failure, then that job should display red but the overall PR should display green.  Etc./nHey folks \ud83d\udc4b  I wrote a post about this on the now infamous closed issue on this topic a while ago where I was sharing a project that I created to bring back some semblance of the \"allow failures\" feature that we used heavily in the Ember community when Travis was the default CI provider./nSeeing a red X against a PR that has successfully passed CI for all shipping versions of the underlying runtime, but failed the nightly is requiring additional training of all project maintainers. I'm very surprised that GitHub closed issue actions/runner#2347 as \"Not planned\" with no notice of why this UX problem is considered acceptable./nHi all \ud83d\udc4b - I'm a PM for Actions and looking into this issue. I'm hoping to setup 5-10 conversations with folks to dig into the problem and use cases. If you're interested in chatting, please use this Google Form to send over your details. I'll close the form and edit my post once I get enough conversations lined up. Thanks and looking forward to chatting!/nAll I ever wanted is a new yellow icon to show when a job that is allowed to fail failed but does not necessarily block merging. \u274c is too much and \u2714\ufe0f is misleading./nAs a temporary workaround, if that can help anyone:/nThis is much needed. There is no way to deem workflow as \"skipped\" or \"neutral\" when one of the jobs fails but it is not so important./n+1 for this feature/n"
    },
    {
        "title": "Can we suppress 'Run cancelled' notifications?",
        "url": "https://github.com//orgs/community/discussions/13015",
        "upvotes": "248",
        "body": "We would like to be able to suppress 'Run cancelled' notifications but still receive 'Run failed' notifications./nThanks for the feedback @alec-maxoptra - there's not at the moment, I'm afraid. I think that there's an opportunity for us to improve our notifications, and we'll take your feedback into account when we look at that work. I'll make sure that this is on the backlog./nThis would be especially interesting for repositories using semantic-release where you definitely want to avoid multiple runs or a release workflow in parallel.\nWe make sure to avoid conflict by using cancel-workflow-action but there is an unnecessary spam of canceled workflow notifications resulting out of this process./nJust to add, I'm also getting frustrated by this. It's generating a lot of notification false positives which is teaching me to ignore notifications :-//nIn our team, stale runs are always canceled. This results in a massive number of notifications. I would be very happy if this could be changed./nsame as \u261d\ufe0f, my inbox is constantly bombarded with these notifications. i have to manually select all and mark as done when that happens. it's cumbersome, and has led to me missing a notification among the noise at least a few times./nWe have some checkers that re-run when developers push new commits to the branch of the pr. It doesn't make sense for in-progress workflows to continue, instead, we cancel them and re-run the checkers for the latest changes./nthe feature is still desired, but if you use gmail, just create a filter to archive/delete the email to avoid notifications./nLegitimate canceling by explicit concurrency section in the action should not generate email notifications, or at least should be configurable./nIs this feature request under development? I see many developers with the same issue receiving bunch of cancelled workflow notifications in email.. pretty annoying!/nour use case is we're using graphite (go check it out, it's awesome) to support stacked PRs. it uses rebase to keep branches in sync, which means every time i update the stack with code from the main branch, it force pushes each branch in the stack./nI'd also love this, my CI is now set up to cancel runs on old commits when new commits are pushed, and this results in a lot of redundant emails./nThis is driving me crazy. The work flow being cancelled is NORMAL. Multiple Devs check in before build is finished. It Cancels the build because some code changed. Why do we need an alert for this? This is not an error./n+1/nit's driving me crazy as well. is there another channel where we can report this, or should we accept that this will likely never get picked up?/nWould also love a way to prevent emails for canceled work flows./nI absolutely concur./nThis issue is pretty much making CI unusable in github for our projects. There is so little difference between a cancelled job and true failure that developers are tuning out of these emails and starting to ignore the results of CI as a result./nAnother one requesting this. Debouncing a build after multiple commits results on multiple \"Run cancelled\" notifications which serve no purpose./nI absolutely concur./nCanceled workflows should not send a failure email. It leads to a ton of false negatives, and ignoring possibly legitimate failure emails with github actions./n+1/n@thispaul me and at least almost 200 other people are frustrated by this for over 1.5 years now. i see you're a PM at github, could you update us on whether the team is aware of this issue? or point me to a person i can contact./nCancelled workflow \u2260 Failed workflow/nI agree on this being annoying and not useful in lots of cases, so having a way to disable it would be nice/nPlease consider prioritizing a fix for this./n+1/n+1, getting spammed with \"run cancelled\" emails because I pushed a change while tests are running is rather annoying./n"
    },
    {
        "title": "workflow_dispatch max inputs from 10 to 25",
        "url": "https://github.com//orgs/community/discussions/8774",
        "upvotes": "230",
        "body": "The workflow_dispatch has a soft limit of 10 input parameters./nHi @igorcosta,/n@igorcosta I am also running into issues with this.\n@chrispat Although the UI seems accept >10 inputs, the workflow immediately fails with\nyou may only define up to 10 `inputs` for a `workflow_dispatch` event error\n/nIt would be great if the limit of workflow dispatch inputs was increased or if a multichoice input type was introduced. I wanted to make it so a user could choose multiple services (we have way more than 10) to release to a chosen environment, but this limitation makes it impossible without some wacky workarounds. As mentioned by savanna-g, UI seems to already work fine with more than 10 inputs, so I hope it is not too hard to implement/nSame way as the other people on the discuss. We need to use more than 10 of different inputs, now using choices, and there is a problem that if the maximum that the worflow_dispatch accepts is only 10. You know if somebody are working on this?/nThis is a marketing strategy I guess. They don't want to compete with interface providers./nDoes anyone know a workaround for defining multiple env vars in one field and parsing them? here is what I mean/nThe \"workaround\" that I have implemented, in case it helps, is to use a repository_dispatch trigger instead of workflow_dispatch.  This event allows you to use freeform json in the client_payload field of the body./nI've also just used a JSON field, but I didn't switch to repository dispatch as was mentioned in the previous answer./nAnother legitimate use of dispatch_workflow inputs, to run an IaC pipeline against a pre-selected group of infrastructure building blocks. Limiting the number of inputs means that we have to combine some of those blocks and hence waste time executing unnecessary code, not to mention the time wasted on development, of course, just to work around a limitation we never anticipated./nAny news on this? I'm needing more than 10 inputs in a workflow, and using repository_dispatch won't solve my problem ://nAn alternative to having more than 10 input options, is implementing a multichoice input type. That way, you can use one input to select a number of options, instead of having a bunch of yes/no choices for each of those options./nSuggestion / up-vote from my side:/nI would like to request a review on this one. I really need  more than 10 parameters in my workflow_dispatch. Right now in order to reduce my parameter count I had to combine certain related parameters separating the values with a colon. For example software and version parameters are now a single software:version parameter; and a snapshot and uid parameters are now a single snapshot:uid parameter. The problem is then I need to break those in my code./nAs everyone mentioned, we also need way more than 10.\nA multiple choice dropdown would be the best option in my opinion. Added bonus if it has a search option that instead of scrolling one by one, you can search for and add selections.\nConsider my vote as 10, for all of my team :)/nAn idea. Allow adding freehand key value pairs with predefined list of keys (the inputs defined in the workflow manifests would serve as key names dictionary). Even better - allow specifying which keys are static (always appear) in the form and which dynamic (user clicks \"add input\" in the bottom of the inputs form to open a new single input entry form with key field suggesting names or being a dropdown) . Perhaps \"required\" option could be used to control that. The \"static\"/required inputs can then be limited if there's need for that. But make it tunable (on organization level?)/nIt's usually some interests at the top that prevent these features to be implemented. For example, the company might be selling an alternative product that could suffer.\nOr it's just pure ignorance, which I think it's even worse/nhello completely reasonable people at github who are totally serious about their product, please 'update your ux'? how am i supposed to migrate off jenkins when you have toy limitations? like your own azure devops product is better than this?/nHere's an idea for a solution, for anyone who hasn't yet found one suiting their needs (since it doesn't seem like github are going to fix this):\ncreate a webpage on github pages, have all of the setup there, and simply pass the consolidated setup to the github action via an api call./nI personally use enviornments for simmilar effect. An enviornment can have many variables which you can use as inputs and then in the actual workflow you can have a dropdown to choose an enviornment. Not perfect but it does work for my usecase and probably some of yours as well/nRan into this 10 input limit today, for a workflow we want to call via GH API. What a great design decision \ud83d\udc4d  This limit doesn't appear to be documented either./nThe contains expression worked for my case. I must confess that the UX was terrible :(/nBumping. People want more inputs \ud83e\udd79/nwell I agree this is bad limitation how we can use this UI./n+1 10 is not enough :|/nBeen following this thread for a while now to see if this limitation would be fixed as it causes problems for us. Currently using contains to check a string for certain sub strings but this is horrible and not really scalable as everyone has said. Would be good to understand if there are plans to do something about this!/nGuys, this is so over.../nHi \ud83d\udc4b\ud83c\udffb I've created a terminal tools the manage GitHub Actions more easy.\nAlso this tool parse json input automatically and you can trigger your workflow more easy&fast.\nGAMA : https://github.com/termkit/gama/nGuys this is ridiculous, it's 2024 and companies pay for this product. This functionality exists at least in Jenkins and your own ADO Pipelines product.\nThe fact that I can't have more than 10 input parameters for a manually triggered job is incredible. How can we build our systems off of this in a frictionless way?\nPlease fix ASAP/nso there I am telling bosses we can migrate all of our ADO pipelines (and repo's) to GH Actions, and boom, ran into this issue./nSo this thread is open from 2 years and half and I can't believe that GitHub Actions still have this huge limit. This product is used and paid by thousand of companies and reusable workflow should be the focus of any actions implementation. The limit of 10 parameters sounds frankly no-sense, sounds like such a simple feature to implements and a lot of clients would benefit./n"
    },
    {
        "title": "Github workflow_dispatch input dynamic values",
        "url": "https://github.com//orgs/community/discussions/12029",
        "upvotes": "229",
        "body": "Can we have a feature in the GitHub actions to populate the workflow_dispatch input values dynamically, maybe using some API response or using other GitHub workflow outputs?/nThat's a neat idea that I hadn't considered.  We'll put this on the backlog.  Thanks for the feedback, @Suchit8./nIs there a feature request for this?/nThis (or something like it) is really important to support dynamic environments. It's getting pretty common to spin up environments for a single branch or testing of a release. Esp with microservices it can become a lot of work to update N number of workflow dispatch input choices./nIt also would be very useful to be able to fill out the options of the dropdown based on the tags of some other repository./nthis feature is very needed, in our use case, we just want to have a list of option which is the file name listed from the root, for example make the output of ls -l to be input options for a GHA run/nHello,\nI would say we should have release version as one of dynamic choice input types. That way we can have a button for release deployment and we can select release number from drop-down list./nIn the meantime, has anyone tried to update the workflow file (its a yaml after all) from another event, committing it to the repo, so when end-user want to use the workflow_dispatch the values are in there./nIs there any update on the feature request?/nThis feature would be super useful for me as well!/n+1/n+1/n+1/n+1/n+1 (missing this feature, is the only feature I miss after migrate from Jenkins to Github action, will be nice to be added)/n+1/nal cielo con ella/n+100/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/nHello, any update on this request to set dynamic values for workflow_dispatch? cc @ethomson/nStarted learning GHA and workflows just a few hours ago, and now ended up here. Either I'm missing something, or this is a desperately needed feature!/nAny update on this feature request would be really helpful. Been looking at this from 2 years \ud83d\ude42.\nIf we are able to run script in choice param, would make worflows alot simpler/nThis isn't the most elegant option, but a decent workaround for this would be to have the workflow validate the input, and print the list of valid options on error./n"
    },
    {
        "title": "workflow_dispach to have dynamic inputs parameters",
        "url": "https://github.com//orgs/community/discussions/11795",
        "upvotes": "220",
        "body": "Thank you for introducing the workflow_dispatch for manual jobs./nYes, GitHub action inputs really need this! Almost crucial for any CICD platform to avoid errors from operators who perform manual jobs on a frequent basis. Please get this feature in ASAP!/nThis is a neat idea.  Thanks for the feedback!  We'll put this on the backlog./n+1 on this. Will add huge benefits/n+1/n+1/nI'd love a dynamic input, let me run some scripts to build a list.\nFor example let me run a script to build a choice parameter that lets me pick a version I want to deploy/nHi, is there any update on this because I need to implement it now in my current requirement or any workarounds for how to pass a variable as inputs would be very helpful./n+1/n+1/n+1/n+1/n+1/nPlus One for this. In my companies work we add deployment environments and want to be able to allow the person running the action to select the environment to deploy to. Right now that means modifying every workflow to add the additional environment to the workflow_dispatch inputs./nPlus one on this./n+1/n+1/nI am shocked that this hasn't been implemented already.  This is a standard feature in literally every single other CI/CD on the market./n+1/n+1/n+1/nThis question is discussed from 2022, but there is no progress until now. I would like to share my workaround approach. Since my company's projects are all private repos in the GitHub Enterprise, there are few people who can use GitHub Actions, so I developed a Chrome extension to solve this problem and use the extension's scripts to handle dynamic options. Do not set type: choice inputs in the yaml and the workflow will not check the value of the input./n+1/n+1 \ud83d\ude4f/n+1/n+1/n+1/n+1/n+1/n+1/n"
    },
    {
        "title": "Concurrency Cancel Pending",
        "url": "https://github.com//orgs/community/discussions/5435",
        "upvotes": "209",
        "body": "Any previously pending job or workflow in the concurrency group will be canceled./nWe have a concurrency set for an label/unlabel event. If 4 labels are added at once, two out of four actions are being cancelled.\nI have tried to set cancel-in-progress: false but it does not help./nI think I'm having a similar problem.\nI switched to this kind of condition:/nIt seems that updating labels on action that uses pull_request.types: [labeled] updates jobs that are in the queue.\nStill unsure how to debug Github events./nPlease add cancel-pending:  false\nWe need this badly, since we're running workflow to create new tags for software bundle, and it's really hard to implement without concurrent run limit for workflow, or at least repo./nI'm running into similar issues at a job concurrency level when trying to control how many runners are handling some platform-specific integration tests, so as not to rate-limit the API that they're talking to. A way to avoid canceling other pending jobs (and, ideally, a way to specify number of concurrent jobs--I can do two concurrent sets of tests without having things have problems) would really help out./nAll/nYeah, just cancelling concurrent jobs screws up the idea of PR check. Pending and waiting should be the default not to talk about the option to configure it./nThank you for all of the feedback./nIt would make sense to include some sort of concurrency option to queue a workflow/job/step (without cancelling it)./nI needed this functionality so I made a quick-and-dirty spin lock mutex. It's working pretty well for me so far: https://github.com/ben-z/gh-action-mutex/nYeah, this would be a great addition, we could use this to coordinate the deployments of the services based on merges to the repo./nAny updates on this? We also need this for an auto-merge job that has concurrency issues when several jobs try to merge at the same time. Having a lock allowing only one job at a time but not cancelling pending jobs would solve this./nLack of cancel-pending: false is a only blocker keeping us from using concurrency. We want all deployment PRs to be queued, not cancelled.\nThey should go in order. Currently we rely on https://github.com/softprops/turnstyle but is not being maintained.../nAnother vote for cancel-pending: false here. I have func test jobs that rely on a separate shared server and cannot be run concurrently without stepping on each others' toes on that target server. But two different branches that cannot run func tests concurrently should still both run func tests./nAlmost the 2 year anniversary. We need this feature too. Can someone please prioritize this? Something tells me it wouldn't take that much time to complete./nPerhaps we need to open a new ticket for this, since this ticket seems to be answered - maybe no one at github is paying attention to answered tickets?/nWould be great if someone can prioritize this./nHi guys, our use case is that we need a passive queue mechanism, two levels of concurrency instead of just one. Our workflow for status checks should cancel pending tasks from the same group 1 (pull request), but keep pending tasks from a different group 2 (repository). Essentially, the workflow should never run in parallel, but should always be queued if it comes from a different pull request. Not being able to specify more groups would be fine as long as we can at least disable cancelling pending tasks at all. This is what we had in Jenkins CI. I find it hard to believe that this is such a rare use case unsolved for years./nHi,\nThis is needed for our usecase as well. We are using Github CI in our organisation for to plan/apply terraform templates.\nWe group the concurrency based on terraform working directory. We don't want to cancel the pending actions and want all the pending actions from the same directory to go sequentially.\nIt would be great to have this feature./nYet another \ud83d\udc4d from me, very similar problem: We need a proper mutex behaviour in order to ensure sequential runs. It's important so that we ensure consistency of the concurrent merges over time, but also so that we don't lose traceability of what merge caused what action to change status./nUnfortunately stumbled across this issue as well, so created a simple GitHub Action to rerun cancelled jobs - https://github.com/marketplace/actions/rerun-workflows/ney github team , please, could you help us? we really need the feature\ncancel-pending: false\nbecause of every workflow is important to us, due we are working with testings and we need to make a lot of process before continue with the next one which is a new version of software that we need to apply later.\ndo you have some news about it?/nGitHub is nothing but pain but nothing can be done to stop execs from buying it. Someday I will work at a place that uses gitlab and I will be at peace./n"
    },
    {
        "title": "Better log separation for composite actions",
        "url": "https://github.com//orgs/community/discussions/21276",
        "upvotes": "208",
        "body": "See actions/runner#1311./nThis is really important. Currently logs of composite actions looks like mess. Why no update on this yet?/nThis is my biggest annoyance with composite actions atm. I am more than happy for them not to even be subspaced, but each step could be right at the top level just like regular steps. After all it is a \"composite\" of steps./nBumping this as well, agree with the rest of the folks/nWe would also greatly benefit from this/nThis could make things a lot nicer. Upvoting!!/nWe would love to have this/nBumping, this would be so helpful/n+1/n+1/n+1/n+1/n+1/nThis is a must-have. Right now, I'm forced to do some awkward stuff with multiple jobs (despite the fact it could all be in one job) in order to try to make the \"build\" steps visually distinct from the \"test\" steps./n+1/nI moved one of my job steps to composite action, to solve another github actions limitation (to be able to skip jobs and still run dependent ones without needing to spam jobs with always() conditions), but now run into this issue, where composite steps are cramped into single step, which is really a mess./nComposite actions are super useful, but the way the logs are currently structured does not help, specially when it gets stuck in some nested step and you don't know anymore where it got stuck. So I +1 this./n+1/n+1/n+1\nI wanted to measure the runtime of each step using DataDog integration, but currently it's impossible to do so because all the steps in composite action are showed as a single run./n+1/n+1/n+1/n+1/n+1/n+1/n+1/n"
    },
    {
        "title": "Feature Request (Github Actions): Dynamic Workflow Run Name",
        "url": "https://github.com//orgs/community/discussions/11396",
        "upvotes": "202",
        "body": "It would be nice to be able to add meaningful runtime data to the name ie via something similar to how a job can be named dynamically./nThanks for the feedback @mpmarven-ms - I agree with you that it would be nice to be able to configure display names.  We'll take a look at adding this support./nThis is especially crucial for workflow runs triggered by workflow_dispatch events, since currently in such workflows every run of a given workflow is completely indistinguishable from one another in the \"runs\" list./nThis would really help my team.\nOur current solution is an in-house browser extension parsing the info we wish to display, and editing Github's HTML to show it while browsing the \"Actions\" section/nI would suggest dynamic folders instead./nLGTM .My team need to review what action have been done so we should add dynamic Workflow Run Name to review that/nThis is especially crucial for workflow runs triggered by workflow_dispatch events, since currently in such workflows every run of a given workflow is completely indistinguishable from one another in the \"runs\" list./nPossibly a different suggestion... add an optional title body parameter. Then just update libraries to support this./nThat would be a great feature.\nWhenever I take a look at workflow runs, they all look same except small ID run difference which doesn't make any sense for our use case. I would highly appreciate if we can attach user defined texts at run time to the workflow name or description.\nI mean by description, the red text in the pic:\n/nHi All - Just wanted to let everyone know that this feature is now live./nThank you to each and everyone for making this happen , superb feature and helping in multiple ways/nI noticed this was missing from schemastore so I've submitted a PR to update the Github Workflow JSON schema: SchemaStore/schemastore#2503/nIs there a way to filter workflows by name using run-name feature? as far as I can see its not possible since it will still get the workflow name by default.\nIt was nice to have this feature since for example I can have 100 runs on an workflow triggered from other repos and I want to sort a specific values in \"filter workflow runs\"/nThis is a great feature but we use reusable workflows a lot and from my tests it does not seem to be possible to set the run-name from within the reusable workflow. Are there any plans to support this?/nThanks for implementing this feature! It's important for our developers experience! :-)/nI'm having issues using this on an enterprise repo. Are there plans to implement this for enterprise?/nHey there folks!!! Is there a way to use the job names as the run-names dynamically in a workflow file having multiple jobs?/n"
    },
    {
        "title": "[REQUEST] Workflows seen in Actions UI separated by folder structure",
        "url": "https://github.com//orgs/community/discussions/11831",
        "upvotes": "201",
        "body": "Currently in the Actions UI it just lists all the workflows that are in the .github/workflows directory. This is manageable until you have too many unique workflows (30+) in one repository./nThanks @keithlai124 - I agree that things start getting long when you have a lot of workflows.  This is something that we'll improve, although I do not have a definite date for this./nChiming in here, would like to see this as well. Or perhaps via grouping mechanism giving by workflow metadata in workflow files?/nMaybe a tag based system through the yaml?/nHi Folks, Is there any update on this issue?/nHello,/n+1/n+1/nManaging 120 workflows in a single repo makes a hell of an entertainment./n+1/n+1/n+1/n+1/nHi everyone \ud83d\udc4b/n+1/n+1/n+1/n+1/n+1/nIm really interested in this feature being added, our team is working on a monorepo with several teams and would be nice to have structured view / grouping of workflows/n+1/n+1/n+1/n"
    },
    {
        "title": "Stop rounding up individual jobs to the nearest minute for billing",
        "url": "https://github.com//orgs/community/discussions/8726",
        "upvotes": "173",
        "body": "A good well structured deployment script in Github Actions can involve many quick jobs. In our case we are aproaching 16 (typical execution time of 4-6 seconds), it's a bit unreasonable to be paying for 16 minutes per job for a total of just over 1 minute of CPU time./nHi @splitice, I understand where you're coming from - certainly the current setup for GitHub Actions workflows is optimized for longer-running jobs.  But I'm not sure that multiple jobs is more \"correct\" unless you actually need a separate virtual machine for each step./n@ethomson I can't share the workflow of the job that inspired this however I can share s screenshot of a similar one. It's a CD job for an In Development application (and it's already at 12 jobs - expected to be over 30 when complete)./nI really appreciate your detailed feedback.  This is really useful to understand for our planning./nI am having the same issue. I created a matrix job in a pipeline that packages umbrella helm charts (around 90). Each matrix takes roughly 30 seconds but I'll be changing this to a script because this matrix approach is using too many minutes./nI might understand that Github actions billable time was rounded to the minute 3 years ago when the service was still young, but 3 years later I just don't understand why Github does not charge a fair price based on real usage./nI've just experienced a very similar thing \u2014 Now moving into 2023 \ud83e\udd26\u200d\u2642\ufe0f/nCame across this thread while trying to figure out how 11s resulted in a 54x charge of 10 minutes.  Not sure if it's related to rounding or if it's a bug that overcharges for reruns or unmet conditions:/nWe hit this issue fairly hard, e.g./nWe hit the same issue. We are evaluating different solutions, and this issue does not help using concurrency. Because instead of just building something, and then running multiple job with the result of the build, we will have to put everything in the same job to reduce our costs, and this will double the time of the whole pipeline (1min vs 2min)./nHow 'un'funny: just splitted up my workflow in a pipeline with sub jobs (github docu also says its a good way to reuse workflows) and now i'm discovering this specific issue./nStarted on use of matrix stragegy to reuse jobs, but with this in mind, is a NO-GO!\n/nYeah this rounding-up billing model is really anti-customer. Do better./n5 months later and still overbilling/nI set up a simple workflow to check stale issues and PRs and it runs for 4 seconds. I'm billed for the full minute. Should I hide this check in some other workflow instead?/nThis is frustrating because by splitting up jobs to be more efficient and take less overall time, I'm actually using more billable minutes?/nCan someone representing GitHub chime in here? Is this something that will be addressed? This is a deciding factor for me in selecting a CI/CD product./nUp!\nThis issue is still unresolved and definitely needs attention. I run the cron_job which takes about 12 to 13 seconds and I billed for 1 minute each time.\nSo, I run this cron_job for a 100 times and was charged for a 100 minutes instead of 20 minutes, which is x5.\nCommon GitHub Actions team, it is almost 2024, stop rounding it, charge your customer by seconds, I'm not even asking for a milliseconds./nWe are also using more monolithic jobs because we are trying to optimize for costs instead of optimising for visibility and split of concerns./nhow this is still a thing in 2024 is beyond me./nAWS bills every customer on per-second basis. I am fairly certain that it is possible for GitHub to follow the same policy (and be profitable and maintain customer trust)./nSeems like Github will do nothing as long as people swallow the pill and pay. I'm looking into CircleCI and other competition/nAmazing that we've made it to 2024 and this discussion is still open.\nBoth Azure and AWS bill their linux nodes by the second and yet good old GitHub is billing us up to 100x for job in a workflow.\nMatrix builds are a real money maker.\nIf runners are indeed so expensive to spin up that they need to bill for that (I doubt it) then be up front and add some fixed \"start up time\" rather than arbitrarily making a 10s job pay 50s \"startup tax\" and 50s jobs pay 10s \"startup tax\"./nAny update from anyone at github?/nI have a dozen jobs that are just over 1 min , and rounding it up to 2mins basically 2x the costs for them..\n/nThe docs say./n"
    },
    {
        "title": "Hide Jobs in Actions UI when If is false",
        "url": "https://github.com//orgs/community/discussions/18001",
        "upvotes": "164",
        "body": "At time of writing this when you have a multi-stage workflow defined it will show every single job and set of steps defined in all associated workflows and composite actions. Having the ability to hide a job in the UI if it will not be ran would be a great feature./nThis is really desirable!!/nThe default behavior should be that skipped jobs are hidden. If someone wants to see the skipped jobs, let them optionally enable that./nWhenever this is implemented, Please make it optional./nThe default behaviour should be rather that skipped jobs are shown. It would be less of a breaking change to introduce a new job option hide./nAny update on this? I'd still very much like to hide skipped actions on PR's in the UI./nBump! This would be great!/nBump! Also adding a use-case for this feature. I am using \"proxy workflows\" as a workaround for a lack of dynamic \"uses\" when triggering reusable workflows (choosing which to execute). I am using a solution similar to this suggestion./nMaybe an easier/less invasive option would be to extend the jobs.needs context with something like:/nThis problem is significantly worse when using Matrices and/or reusable workflows. In the below image, we had one reusable workflow that can take one of three journeys down the remainder of the workflow logic. The other three paths (and their sub-paths) are shown in the UI and often cause confusion.\n/nWe also make heavy use of shared workflows with switches to turn workflow features on and off. I'd love to see this feature added./nI would like to +1. In my case I have a reusable workflow inside a matrix, and one of the job of the reusable workflow should run only in some cases, after other jobs in the reusable workflow. A job-level setting would be great to hide those that don't run./n+1. Definitely a needed enhancement to GitHub Actions UI. At least have a UI option to hide skipped jobs./n+1 it would be great the have the option!/n+1 Bumping up, would love to see this feature!/n+1/n+1/n+1/n+1/n+1/n+1/n"
    },
    {
        "title": "Trigger workflow only on pull request MERGE",
        "url": "https://github.com//orgs/community/discussions/26724",
        "upvotes": "155",
        "body": "I saw many posts about people asking if there is a way to trigger the workflow only on MERGE, which to me seems the most useful. However I did not see any answer, so I would like to find a solution./nsame question/nThere\u2019s no way to specify that a workflow should be triggered when a pull request is merged. However, because a merged pull request always results in a push, you can use the push event to accomplish your goal./nFor the event on.pull_request.closed , it is designed that whenever the PR is closed the workflow will be triggered. And currently, there is not a specialized event type for PR merged, such as on.pull_request.merged./nEven though I still would prefer a merge option, I think this makes sense. Thanks/nI use this which triggers on merge:/nIt\u2019s work for me/nThis can not work as expected. If the PR is closed without merging, the action will still run./nWhen I say \u201cthis\u201d I mean:/nI think this is the best solution\nI changed to only use\nif: github.event.pull_request.merged == true since I already filtered on pull requests in the on: part/nHey folks, I wrote a little blog post + showcase repo that explain how to execute a certain job or step only if a PR has been merged and not just closed. Hope that helps \ud83d\ude42/nThis solution with the restriction to directly push commits to master solves the problem./nThis is exactly what I was looking for. Thanks, Jen!/nWhat if the workflow requires inputs before running? After PR merge, how is one supposed to get the inputs?/nI prefer this solution. Most obvious/nThe documentation shows exactly that in this example: Events that trigger workflows - GitHub Docs/nHere\u2019s what our team is doing:/nA merge technically encompasses a commit \u201cpush\u201d, targeting a specific branch (i.e., main). If you don\u2019t target a branch, the workflow would trigger with any, including main. It\u2019s like if you were to merge a feature branch into main locally and then push main to remote; all done on the remote in this case. This is exactly what the workflow team was thinking as well. This makes complete sense./nI have the same concern as @minherz where I'd like to run integration tests and screenshot tests only before merge because they are very expensive if triggered on every PR update. It's too late to run if the test runs after they are merged to master./nMaybe put another way, it would be great to have pull request merges work as transactions, with a mechanism to have failing workflows cause the transaction to rollback. Besides expensive tests, this could also be used to validate successful deploys. (The deployment process would have to be carefully designed to roll itself back.)/nSince I posted my comment, I realize GitHub is about to release a new feature called merge queue. Looks like we will get a new event \"merge_group\" to trigger a set of tests before the PR is merged. I haven't tried it since the beta test has ended. Can someone help me confirm whether my assumption is correct?/nmadness. I just want it./n@say8425 have you already tried this? https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request_target-workflow-when-a-pull-request-merges/nI have the following:/nOne way that works for me is:/nJust want to add my 5 cents:\nin my case I wanted to build and run my tests on all branches but connect to dicker-hub and build&push image only when it's main/n"
    },
    {
        "title": "Allow reusable workflows to be at arbitrary file locations",
        "url": "https://github.com//orgs/community/discussions/10773",
        "upvotes": "148",
        "body": "After seeing https://github.blog/changelog/2022-01-25-github-actions-reusable-workflows-can-be-referenced-locally/, I was very excited to run jobs like:/nFollow up question for you.  You are using this example:/n\ud83d\udc4d/nWe're trying to create an organizational level repo to hold all our reused workflow components across the company, and this restriction is making organization of these extremely difficult. We have to put every single reusable workflow in the same folder, with no nesting or organization beyond how they are named?/nYeah, this seems like a pretty arbitrary restriction to not allow subdirectories for organizational purposes./nIs there any status update on this? This issue is nearing 2 years old now./nThis would be incredibly helpful - not sure why this restriction exists but it would really help manage and organise lots of re-usable jobs to not end up with tons of workflows at the same level of the directory/n"
    },
    {
        "title": "Triggering by other repository",
        "url": "https://github.com//orgs/community/discussions/26323",
        "upvotes": "144",
        "body": "Is it possible to run a github action on a push to a 2nd repository?/nTriggers are per-repository, _however\u00a0_you could send a \u201crepository dispatch\u201d event to your Application repository.\u00a0 This is a custom event type that has no explicit meaning within GitHub, that you can use for your own purposes./nThanks. I\u2019ve accepted it as a sollution./nI don\u2019t agree that this is a \u201codd\u201d usecase./nIs it possible to go the other way./nThis POST command seems to be out of date - see https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event. I got it working instead with this in the application workflow:/nThis is pretty important for our CI across an SDK which is split into various modules across different repos.  It\u2019s something that\u2019s supported in Jenkins.  Hopefully this will be functionality that arrives at some point./nHow can I use it for two repositories on an organization?/nYou can do something like this nowadays:/nAs far as I understand, this still uses the default repo-scoped GITHUB_TOKEN so you need to pass your own token if you want to access a different repository: GitHub - actions/github-script: Write workflows scripting the GitHub API in JavaScript/nAlso worth noting that the documentation link to the right area is https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#repository_dispatch/nA complete use case/nHello/nAppreciate you taking the time to inform us.  Definitely takes a lot of trial and error./nI had a lot of back end forth and this is what worked for me:/nThis is all a very interesting discussion.  I am pleased that I am able to start a workflow in another repository in our org successfully with:/nMy org has created https://github.com/marketplace/webhook-actions to allow for dispatching across repositories without the use of PATs. Currently we can only offer a free plan until we reach 100 installations./nso i came up with a horrible way to do this. set up a webhook in discord to post to a private channel when the repo has the desired trigger. then have a bot watch the channel for messages and when there's a message it will trigger your repo. yes i know this is horrible/nIt's also possible to use the GitHub CLI to send a workflow_dispatch event and then wait for the run to complete:/nThis is how I got the repository_dispatch (not workflow_dispatch) approach mentioned in the answer to work.\nWorkflow in my-org/target-repo:/nHow can I apply this to a pair of repositories within an organization?/nI'm not too hopeful, but does anyone know if there's any update on a standard way for a consumer repo to monitor for a version update on a producer repo, without the producer taking some action (creating a dispatch event)? My main issues with this are:/nAlong with the trigger is it possible to pass a value from repo to another?? Eg: Pass docker image tag to be passed from one to another repo/nNot exactly a solution to the requested, but there is always the option to schedule the running of a workflow in your Application repo to check for changes in the Library repo, and when it finds changes, perform a build!/n"
    },
    {
        "title": "Allowing github-actions[bot] to push to protected branch",
        "url": "https://github.com//orgs/community/discussions/25305",
        "upvotes": "143",
        "body": "Hello,/nIf we enabled GitHub Actions to push to a protected branch then any collaborator in your repo could push any code to any branch they wanted simply by creating a branch and coding the workflow to push to to some other branch.\u00a0 Using the REST api to merge the PR is the right flow and overtime hopefully there will be actions that make that easier to implement.\u00a0\u00a0/nThanks!/nI found a partial solution to this, it allows you to have protected branches that require 1 approval and a green CI. See\u00a0https://github.com/ridedott/dependabot-auto-merge-action./nThe same thing applies for other bots. I don\u2019t understand why you don\u2019t allow the CodeOwner feature to prevent updating workflows, and then allow the github action bot to push to the same branch that triggered it./nThis is kind of not a solution to the problem, it\u2019s not necessarily true that any collaborator could do what you say, why should the workflow have the same permissions as an Action?\u00a0 The collaborator would also have to be able to control the specific Action and what it does, not the whole runner.\u00a0 Consider the following extremely common scenario:/nI agree with this. @chrispat 's answer completely overlooks this common workflow and it would be great if there was a way to allow this to happen by allowing the GitHub token to have more fine-grained permissions./n@chrispat I have created a token with every scope and I still can\u2019t publish from a GitHub action. Everything works fine locally using this token. What could possibly be going wrong?/nhi\u2026 did you figure out why this happens? I have the same issue./nbtw, I found a solution by reading the documentation of:\n/nPersonal Access Tokens are an anti-pattern here. When that user moves teams or leaves the company the actions will begin to fail./nIs there still no option here that doesn\u2019t require the anti-pattern of creating a bot user just to work around Github limitations?/n@chrispat Could you please explain us what could go wrong with the workflow described by @mtesch-um, I sum-up: PR reviews enforced including for administrators?\nYou throw up your answer but avoid answering to someone who got a real point here. What do we do to use Github with reviews including for administrators + automation?\nAs the others, I\u2019m genuinely asking because we have a real use case that is explained and you don\u2019t explain your view actually./n@chrispat Now that this feature has merged, all we need is that GitHub Actions job runner could be selected for this Allow bypassing required pull requests | GitHub Changelog/nThis still wouldn\u2019t be secure as the GitHub Actions user isn\u2019t branch specific.  So adding it to this list would mean that anyone could push from any branch using a workflow and bypass all branch protection rules./nWell at present, users are inserting personal access tokens to do what the GITHUB_TOKEN secret should. Even making it so that ONLY on the main branch the  token can override protected branches would be a huge step forward./nI'm still hopeful for a more elegant solution to this issue./nThis is still a problem./nA colleague I discussed this with noticed the feature shown in this screenshot:/nOur case is pretty straightforward and this has been quite a problem:/nMaybe I am just doing things wrong. I have a dev branch where all PRs get merged onto. Once that is tested and approved I make a PR from dev to main and do a Rebase and merge so the commits get copied over./nHey, really 5 years for this feature?\nIt's a basic feature when you need to release library or something./nTo anyone who need this we just had a contributor add a plugin to our automated release too auto that makes this really easy and I'm sure it could be copied for other's needs./n/nThere seems to be a possible solution https://github.blog/changelog/2022-08-18-bypass-branch-protections-with-a-new-permission//nFor anyone struggling with this I wanted to share my solution using a Personal Access Token (PAT) that I just got working with a popular library from NPM called release-it./nAdding my \u27951\ufe0f\u20e3 to this - the most secure solution definitely seems like a \"allow actions to bypass rules but only for the calling branch\". That would improve security over the PR or PAT approaches./nAre there any new workarounds currently on how to bypass branch protection with a gha bot. I have a separate account for a bot which uses a PAT and I want the bot to be able to commit to protected branches but I do not want users to abuse this by creating an action which uses the bot to commit to the same protected branches./nThis workaround has worked for me, where i wanted to bypass branch protection rules to commit a new version in pom.xml to version upgrade as part of CI:\nhttps://gist.github.com/kartikv11/b565a9c1b9499f6096c380b9c577d762/nWhile I know using PATs is a security risk, I came up with a solution that worked for an open source project that I contribute to where we have a need to auto bump versions on both repo PRs AND forked PRs when they merge to the main branch. Historically using a PAT with one workflow run would fail, as it runs in the context of the forked PR and does not have access to the repo secrets./nIn my company we came across the same issue and found a solution which works pretty good and does not require adding a PAT:/n"
    }
]